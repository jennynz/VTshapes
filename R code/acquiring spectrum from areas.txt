#		7th Nov 2013

## Adapted compileMRIAreas so that it enables an input of number of tubes to interpolate for.

## selected 16 tubes and  obatined allMRI.df16

## next adpated code again so that it out put the distances of each node, rather than the vocal tract areas - last value is the vocal tract length -
## called this allMRIleng.df16

## calculated reflection coefficients, then lpc coefficients
out=apply(allMRI.df16[,4:18],1,calc.reflection.coef)
out2=apply(out,2,rc2lpc.II)
out3=apply(out2,2,lpc2spec.III,512)


## (note didn't take last column in dataframe, as calc.reflection coef - adds a zero value for the glottis)
## also note out and out2 have the dimensions 16 by 110, and out3 is 512 by 110 - so are transposed

## next looked at output on plots
##established did need lpc2spec.III - on account of that pesky zero, at dc - doesn't change other pole positions.
## also need to plot on log scale - otherwize spectrums look odd.

## next found the sampling frequency for each spectrum  - calculated from 340000*number of area coefficients/(vocal tract length*2)
## had to be careful of scale as lengths in mm

fs<-340000*16/(allMRIleng.df16[,19]*2)	

# Next work out the correct frequency bins scaling for each spectrum - - need to transpose the matrix so now 110 by 512

freqbins.t=t(freqbins)*fs/(2*512)

## checked that last column of the freqbins.t is half the sampling frequency - it was

sum(freqbins.t[,512]==fs/2)


## give the spectrums a better name, and also transpose those to be 110 by 512

vtspec=t(out3)

## plotted a few spectrums to see what they looked like, and also bark scaled them

par(mfrow=c(2,2))
plot(freqbins.t[1,],log10(vtspec[1,]),type="l")
plot(freqbins.t[2,],log10(vtspec[2,]),type="l")
plot(bark(freqbins.t[1,]),log10(vtspec[1,]),type="l")
plot(bark(freqbins.t[2,]),log10(vtspec[2,]),type="l")

## find out the min ( and max out of interest) fs/2 value - that will be around the maximum frequency value for all spectrums (want all spectrums to be on same scale)

min(freqbins.t[,512])
max(freqbins.t[,512])

## min value was 6259 Hz

## find the index for each frequency bin vector which is the maximum frequency value that is less than or equal to the min fs/2 value

##Want to see what actuall frequency value this equates too

diag(freqbins.t[1:110,endbin[1:110]])

## what is the difference between these values and the minimum fs/2 value
diag(freqbins.t[1:110,endbin[1:110]])-min(freqbins.t[,512])

## and what is this difference in Bark?
bark(diag(freqbins.t[1:110,endbin[1:110]]))-bark(min(freqbins.t[,512]))


## as you can see these values are quite close to 6259.01
> diag(freqbins.t[1:110,endbin[1:110]])
  [1] 6254.600 6252.267 6248.201 6258.241 6242.285 6252.483 6246.026 6248.389 6254.202 6249.058 6247.640 6246.103 6245.372 6254.769 6242.868 6251.027
 [17] 6244.640 6248.933 6244.665 6257.140 6243.911 6249.270 6250.192 6243.976 6258.204 6253.204 6246.718 6243.471 6252.669 6253.661 6248.655 6255.876
 [33] 6242.802 6248.319 6251.094 6247.644 6245.559 6251.481 6256.289 6243.671 6256.485 6255.641 6258.670 6253.348 6252.664 6244.907 6250.802 6253.878
 [49] 6248.815 6243.944 6246.987 6255.556 6251.592 6251.560 6255.983 6240.044 6251.886 6253.054 6258.453 6253.421 6255.137 6252.483 6240.905 6242.328
 [65] 6249.504 6250.490 6247.044 6257.134 6246.634 6247.304 6258.783 6245.333 6256.765 6252.512 6259.010 6256.702 6248.948 6251.602 6255.324 6257.259
 [81] 6249.321 6252.212 6254.590 6250.001 6257.645 6256.656 6246.855 6252.255 6255.931 6246.309 6254.111 6248.018 6250.669 6243.979 6252.504 6246.244
 [97] 6244.401 6257.038 6254.909 6253.999 6247.883 6256.695 6244.655 6250.211 6251.543 6251.625 6258.335 6248.764 6254.410 6246.502

## this makes that point more clearly
> diag(freqbins.t[1:110,endbin[1:110]])-min(freqbins.t[,512])
  [1]  -4.4098928  -6.7435824 -10.8095894  -0.7695011 -16.7250700  -6.5276676 -12.9841512 -10.6210209  -4.8083120  -9.9520795 -11.3700031 -12.9070906
 [13] -13.6378003  -4.2413273 -16.1421645  -7.9833643 -14.3698555 -10.0770823 -14.3450145  -1.8701722 -15.0992863  -9.7402544  -8.8187179 -15.0338718
 [25]  -0.8064671  -5.8059710 -12.2922051 -15.5388995  -6.3412466  -5.3489579 -10.3554716  -3.1346545 -16.2078550 -10.6914562  -7.9158483 -11.3658162
 [37] -13.4509854  -7.5292869  -2.7211373 -15.3394769  -2.5257492  -3.3689859  -0.3398127  -5.6618962  -6.3463209 -14.1033784  -8.2085679  -5.1320321
 [49] -10.1954747 -15.0665729 -12.0227814  -3.4538650  -7.4182796  -7.4501669  -3.0269332 -18.9664399  -7.1245565  -5.9566325  -0.5577671  -5.5893898
 [61]  -3.8735236  -6.5268314 -18.1050640 -16.6824058  -9.5058908  -8.5199021 -11.9660484  -1.8759506 -12.3763989 -11.7061536  -0.2272846 -13.6772930
 [73]  -2.2452118  -6.4986739   0.0000000  -2.3080451 -10.0621760  -7.4085149  -3.6861571  -1.7513622  -9.6897671  -6.7984349  -4.4204642  -9.0096720
 [85]  -1.3648094  -2.3546905 -12.1554943  -6.7552827  -3.0788286 -12.7014755  -4.8987923 -10.9921353  -8.3415186 -15.0317290  -6.5061830 -12.7663332
 [97] -14.6088199  -1.9722588  -4.1013167  -5.0114263 -11.1276288  -2.3147989 -14.3554477  -8.7991869  -7.4672142  -7.3852927  -0.6748658 -10.2467669
[109]  -4.5999265 -12.5083811

## this results in an even smaller Bark Value - so its okay to just truncate at the index closest to min fs/2, and then interpolate that.
> bark(diag(freqbins.t[1:110,endbin[1:110]]))-bark(min(freqbins.t[,512]))
  [1] -0.0034322187 -0.0052500203 -0.0084196608 -0.0005986372 -0.0130366631 -0.0050817925 -0.0101161214 -0.0082725935 -0.0037424898 -0.0077509309
 [11] -0.0088567754 -0.0100559880 -0.0106262343 -0.0033009564 -0.0125814125 -0.0062161550 -0.0111976325 -0.0078484058 -0.0111782415 -0.0014551048
 [21] -0.0117670837 -0.0075857604 -0.0068672921 -0.0117160118 -0.0006273980 -0.0045195542 -0.0095762097 -0.0121103293 -0.0049365516 -0.0041635688
 [31] -0.0080654992 -0.0024393223 -0.0126327137 -0.0083275262 -0.0061635338 -0.0088535095 -0.0104804342 -0.0058622687 -0.0021174254 -0.0119546175
 [41] -0.0019653393 -0.0026217488 -0.0002643452 -0.0044073244 -0.0049405049 -0.0109896247 -0.0063916825 -0.0039946108 -0.0079407286 -0.0117415428
 [51] -0.0093660084 -0.0026878296 -0.0057757608 -0.0058006103 -0.0023554650 -0.0147877809 -0.0055468740 -0.0046369190 -0.0004339066 -0.0043508457
 [61] -0.0030145658 -0.0050811410 -0.0141146995 -0.0130033400 -0.0074030255 -0.0066343575 -0.0093217477 -0.0014596017 -0.0096418996 -0.0091189966
 [71] -0.0001768055 -0.0106570574 -0.0017469876 -0.0050592030  0.0000000000 -0.0017958915 -0.0078367819 -0.0057681513 -0.0028686826 -0.0013626439
 [81] -0.0075463943 -0.0052927595 -0.0034404509 -0.0070161546 -0.0010618372 -0.0018321967 -0.0094695477 -0.0052591368 -0.0023958635 -0.0098955442
 [91] -0.0038129560 -0.0085620374 -0.0064953110 -0.0117143389 -0.0050650535 -0.0099461525 -0.0113841758 -0.0015345532 -0.0031919341 -0.0039006777
[101] -0.0086677196 -0.0018011482 -0.0111863857 -0.0068520667 -0.0058138952 -0.0057500546 -0.0005250092 -0.0079807274 -0.0035802048 -0.0097448777



###

trunc.freqbin=matrix(,ncol=256,nrow=110,byrow=TRUE)
trunc.vtspec=matrix(,ncol=256,nrow=110,byrow=TRUE)

for(i in 1:110)
{
foo=approx(freqbins.t[i,1:endbin[i]],vtspec[i,1:endbin[i]],n=256)
trunc.freqbin[i,1:256]=foo$x[1:256]
trunc.vtspec[i,1:256]=foo$y[1:256]
}


trunc.freqbinb=matrix(,ncol=256,nrow=110,byrow=TRUE)
trunc.vtspecb=matrix(,ncol=256,nrow=110,byrow=TRUE)

for(i in 1:110)
{
foo=approx(bark(freqbins.t[i,1:endbin[i]]),vtspec[i,1:endbin[i]],n=256)
trunc.freqbinb[i,1:256]=foo$x[1:256]
trunc.vtspecb[i,1:256]=foo$y[1:256]
}


plot(trunc.freqbinb[1,],log10(trunc.vtspecb[1,]),type="l",main=allMRI.df[1,3])
plot(trunc.freqbinb[2,],log10(trunc.vtspecb[2,]),type="l",main=allMRI.df[2,3])
plot(trunc.freqbinb[3,],log10(trunc.vtspecb[3,]),type="l",main=allMRI.df[3,3])
plot(trunc.freqbinb[4,],log10(trunc.vtspecb[4,]),type="l",main=allMRI.df[4,3])
barkspec.pc=prcomp(trunc.vtspecb[,1:200],scale=T)
summary(barkspec.pc)
bark(trunc.freqbinb[1,],inv=T)
barkspec.pc=prcomp(trunc.vtspecb[,40:200],scale=T)
summary(barkspec.pc)
barkspec.pc=prcomp(trunc.vtspecb[,30:200],scale=T)
summary(barkspec.pc)
barkspec.pc=prcomp(trunc.vtspecb[,1:200],scale=T)
summary(barkspec.pc)

I think I need to make the frequency bands bigger.

November 11th - remembered I didn't take logs of spectrum - results much better.

## had to first replace zero ammplitude in spectrrum with very small number

which<-trunc.vtspecb==0
foo=trunc.vtspecb
foo[which]
foo[which]=10^-16

## Once I did this I was able to use log function - otherwize I got an error


barkspec=prcomp(log10(foo[,1:200]),scale=T)

> summary(prcomp(log10(foo[,1:200]),scale=T))
Importance of components:
                          PC1    PC2     PC3     PC4     PC5     PC6     PC7     PC8     PC9    PC10    PC11    PC12    PC13   PC14    PC15    PC16    PC17
Standard deviation     7.4038 7.1770 4.31365 3.89399 2.92486 2.67759 2.24724 2.07069 1.94268 1.75537 1.64854 1.44703 1.39162 1.3635 1.29372 1.21536 1.15203
Proportion of Variance 0.2741 0.2576 0.09304 0.07582 0.04277 0.03585 0.02525 0.02144 0.01887 0.01541 0.01359 0.01047 0.00968 0.0093 0.00837 0.00739 0.00664
Cumulative Proportion  0.2741 0.5316 0.62467 0.70048 0.74326 0.77911 0.80436 0.82580 0.84467 0.86007 0.87366 0.88413 0.89381 0.9031 0.91148 0.91886 0.92550
                          PC18    PC19    PC20    PC21    PC22    PC23    PC24    PC25    PC26    PC27    PC28    PC29    PC30    PC31    PC32    PC33
Standard deviation     1.05181 1.04089 0.95225 0.89733 0.87968 0.84269 0.83103 0.77774 0.75630 0.72405 0.70612 0.65819 0.64121 0.60822 0.59673 0.56099
Proportion of Variance 0.00553 0.00542 0.00453 0.00403 0.00387 0.00355 0.00345 0.00302 0.00286 0.00262 0.00249 0.00217 0.00206 0.00185 0.00178 0.00157
Cumulative Proportion  0.93103 0.93645 0.94098 0.94501 0.94888 0.95243 0.95588 0.95890 0.96176 0.96438 0.96688 0.96904 0.97110 0.97295 0.97473 0.97630
                         PC34    PC35    PC36    PC37    PC38    PC39    PC40    PC41    PC42    PC43    PC44    PC45    PC46    PC47   PC48    PC49
Standard deviation     0.5470 0.51862 0.49406 0.48134 0.48009 0.44267 0.42895 0.41156 0.40628 0.40418 0.39202 0.38765 0.38142 0.35507 0.3462 0.34188
Proportion of Variance 0.0015 0.00134 0.00122 0.00116 0.00115 0.00098 0.00092 0.00085 0.00083 0.00082 0.00077 0.00075 0.00073 0.00063 0.0006 0.00058
Cumulative Proportion  0.9778 0.97914 0.98036 0.98152 0.98268 0.98366 0.98458 0.98542 0.98625 0.98706 0.98783 0.98858 0.98931 0.98994 0.9905 0.99113
                          PC50    PC51   PC52    PC53    PC54    PC55    PC56    PC57    PC58    PC59    PC60   PC61    PC62    PC63    PC64    PC65
Standard deviation     0.32259 0.32010 0.3161 0.30509 0.29606 0.28800 0.27787 0.27468 0.26354 0.26112 0.24847 0.2444 0.22674 0.22269 0.21972 0.21012
Proportion of Variance 0.00052 0.00051 0.0005 0.00047 0.00044 0.00041 0.00039 0.00038 0.00035 0.00034 0.00031 0.0003 0.00026 0.00025 0.00024 0.00022
Cumulative Proportion  0.99165 0.99216 0.9927 0.99312 0.99356 0.99398 0.99436 0.99474 0.99509 0.99543 0.99574 0.9960 0.99629 0.99654 0.99678 0.99700
                          PC66    PC67    PC68    PC69    PC70    PC71    PC72    PC73    PC74    PC75    PC76    PC77   PC78    PC79    PC80    PC81
Standard deviation     0.20515 0.19635 0.19572 0.18708 0.18486 0.17485 0.17276 0.17251 0.16284 0.15281 0.15047 0.14767 0.1429 0.13266 0.12827 0.12480
Proportion of Variance 0.00021 0.00019 0.00019 0.00017 0.00017 0.00015 0.00015 0.00015 0.00013 0.00012 0.00011 0.00011 0.0001 0.00009 0.00008 0.00008
Cumulative Proportion  0.99721 0.99741 0.99760 0.99777 0.99794 0.99810 0.99824 0.99839 0.99853 0.99864 0.99876 0.99887 0.9990 0.99906 0.99914 0.99922
                          PC82    PC83    PC84    PC85    PC86    PC87    PC88    PC89    PC90    PC91    PC92    PC93    PC94    PC95    PC96    PC97
Standard deviation     0.12117 0.11753 0.10928 0.10434 0.10004 0.09857 0.09588 0.09481 0.08723 0.08323 0.07688 0.07652 0.07365 0.07136 0.06876 0.06564
Proportion of Variance 0.00007 0.00007 0.00006 0.00005 0.00005 0.00005 0.00005 0.00004 0.00004 0.00003 0.00003 0.00003 0.00003 0.00003 0.00002 0.00002
Cumulative Proportion  0.99929 0.99936 0.99942 0.99947 0.99952 0.99957 0.99962 0.99966 0.99970 0.99973 0.99976 0.99979 0.99982 0.99985 0.99987 0.99989
                          PC98    PC99   PC100   PC101   PC102   PC103   PC104   PC105   PC106   PC107 PC108  PC109     PC110
Standard deviation     0.05895 0.05712 0.05170 0.04855 0.04729 0.04322 0.03982 0.03355 0.03292 0.02955 0.027 0.0238 5.499e-16
Proportion of Variance 0.00002 0.00002 0.00001 0.00001 0.00001 0.00001 0.00001 0.00001 0.00001 0.00000 0.000 0.0000 0.000e+00
Cumulative Proportion  0.99991 0.99992 0.99994 0.99995 0.99996 0.99997 0.99998 0.99998 0.99999 0.99999 1.000 1.0000 1.000e+00

## now accounting for 53% of the variance, so do plots.



## PCA plots from areas and resonances

par(mfrow=c(1,2))
eplot(barkspec$x[,1:2],labs=allMRI.df16$vow,centroid=T,main="PC of Bark scaled log spectra")
eplot(foo3$x[,1:2],labs=allMRI.df[,3],centroid=TRUE,formant=T)
eplot(barkspec$x[,1:2],labs=allMRI.df16$vow,centroid=T,main="PC of Bark scaled log spectra",formant=T)
eplot(foo3$x[,1:2],labs=allMRI.df[,3],centroid=TRUE,formant=T,main="PC of areas")





## Plotting the rotation vectors.


plot(trunc.freqbinb[1,1:200],barkspec$rotation[,1],main="resonances, pc1",ylim=c(-0.15,0.15))
plot(trunc.freqbinb[1,1:200],barkspec$rotation[,2],main="resonances, pc2",ylim=c(-0.15,0.15))
plot(foo3$rotation[,1],main="areas, pc1",ylim=c(-0.4,0.3))
plot(foo3$rotation[,2],main="areas, pc2",ylim=c(-0.4,0.3))


### Found out that PC 1 weighting the values between 687HZ and 1329 Hz the most, and PC 2 was weighting the values between 29 and 355Hz. So these values are considerably lower than I expected. I was then thought perhaps it was because I was infact truncating the spectrum at the 200 frequency bin - which was just under 4000. So I repeated exercise - complete with plots on the entire range.

> barkspec=prcomp(log10(foo),scale=T)
> summary(barkspec)
Importance of components:
                         PC1    PC2     PC3     PC4     PC5    PC6     PC7     PC8     PC9    PC10    PC11    PC12    PC13   PC14    PC15    PC16   PC17
Standard deviation     7.773 7.2233 4.55109 3.97057 3.57489 3.1313 2.70723 2.50075 2.22765 2.19141 2.08652 1.98492 1.86156 1.7958 1.74015 1.61884 1.5349
Proportion of Variance 0.236 0.2038 0.08091 0.06158 0.04992 0.0383 0.02863 0.02443 0.01938 0.01876 0.01701 0.01539 0.01354 0.0126 0.01183 0.01024 0.0092
Cumulative Proportion  0.236 0.4398 0.52072 0.58230 0.63222 0.6705 0.69915 0.72358 0.74297 0.76172 0.77873 0.79412 0.80766 0.8203 0.83208 0.84232 0.8515
                          PC18    PC19    PC20    PC21    PC22    PC23    PC24    PC25    PC26    PC27    PC28    PC29    PC30    PC31    PC32    PC33
Standard deviation     1.51909 1.44254 1.38009 1.35014 1.32133 1.27415 1.18190 1.16130 1.14506 1.11799 1.07121 1.01807 0.99002 0.95799 0.93682 0.89379
Proportion of Variance 0.00901 0.00813 0.00744 0.00712 0.00682 0.00634 0.00546 0.00527 0.00512 0.00488 0.00448 0.00405 0.00383 0.00358 0.00343 0.00312
Cumulative Proportion  0.86054 0.86867 0.87611 0.88323 0.89005 0.89639 0.90184 0.90711 0.91223 0.91712 0.92160 0.92565 0.92948 0.93306 0.93649 0.93961
                          PC34    PC35    PC36    PC37    PC38    PC39    PC40    PC41    PC42    PC43    PC44    PC45    PC46    PC47    PC48    PC49
Standard deviation     0.85974 0.85820 0.82279 0.80941 0.79021 0.75988 0.75256 0.72852 0.69580 0.68243 0.66460 0.65566 0.64315 0.62083 0.60742 0.60697
Proportion of Variance 0.00289 0.00288 0.00264 0.00256 0.00244 0.00226 0.00221 0.00207 0.00189 0.00182 0.00173 0.00168 0.00162 0.00151 0.00144 0.00144
Cumulative Proportion  0.94250 0.94537 0.94802 0.95058 0.95302 0.95527 0.95748 0.95956 0.96145 0.96327 0.96499 0.96667 0.96829 0.96979 0.97124 0.97267
                          PC50    PC51    PC52    PC53    PC54    PC55    PC56    PC57    PC58    PC59    PC60    PC61    PC62    PC63    PC64    PC65
Standard deviation     0.58416 0.57343 0.55666 0.54695 0.53675 0.52527 0.51904 0.50878 0.49681 0.49327 0.46514 0.45065 0.43974 0.43456 0.43145 0.41671
Proportion of Variance 0.00133 0.00128 0.00121 0.00117 0.00113 0.00108 0.00105 0.00101 0.00096 0.00095 0.00085 0.00079 0.00076 0.00074 0.00073 0.00068
Cumulative Proportion  0.97401 0.97529 0.97650 0.97767 0.97880 0.97987 0.98093 0.98194 0.98290 0.98385 0.98470 0.98549 0.98625 0.98698 0.98771 0.98839
                          PC66    PC67    PC68    PC69    PC70    PC71    PC72    PC73    PC74    PC75   PC76    PC77    PC78    PC79    PC80    PC81
Standard deviation     0.40776 0.40304 0.39545 0.38933 0.37751 0.37224 0.35428 0.34399 0.33977 0.32871 0.3190 0.31544 0.30715 0.29941 0.29291 0.28620
Proportion of Variance 0.00065 0.00063 0.00061 0.00059 0.00056 0.00054 0.00049 0.00046 0.00045 0.00042 0.0004 0.00039 0.00037 0.00035 0.00034 0.00032
Cumulative Proportion  0.98904 0.98967 0.99028 0.99088 0.99143 0.99197 0.99246 0.99293 0.99338 0.99380 0.9942 0.99459 0.99495 0.99530 0.99564 0.99596
                         PC82    PC83    PC84    PC85    PC86    PC87    PC88   PC89    PC90    PC91    PC92    PC93    PC94    PC95    PC96    PC97
Standard deviation     0.2763 0.27404 0.26513 0.25559 0.24817 0.23835 0.23483 0.2258 0.21673 0.21475 0.20955 0.20233 0.19525 0.19270 0.18094 0.17710
Proportion of Variance 0.0003 0.00029 0.00027 0.00026 0.00024 0.00022 0.00022 0.0002 0.00018 0.00018 0.00017 0.00016 0.00015 0.00015 0.00013 0.00012
Cumulative Proportion  0.9963 0.99655 0.99683 0.99708 0.99732 0.99754 0.99776 0.9980 0.99814 0.99832 0.99849 0.99865 0.99880 0.99895 0.99908 0.99920
                          PC98    PC99   PC100   PC101   PC102   PC103   PC104   PC105   PC106   PC107   PC108   PC109     PC110
Standard deviation     0.16786 0.15549 0.14958 0.14232 0.13949 0.13345 0.12992 0.12033 0.11524 0.10645 0.09968 0.08490 3.452e-15
Proportion of Variance 0.00011 0.00009 0.00009 0.00008 0.00008 0.00007 0.00007 0.00006 0.00005 0.00004 0.00004 0.00003 0.000e+00
Cumulative Proportion  0.99931 0.99940 0.99949 0.99957 0.99964 0.99971 0.99978 0.99984 0.99989 0.99993 0.99997 1.00000 1.000e+00

## So now only 44% of the variance is explained.

## obtained PC1 vs PC2 plots

> par(mfrow=c(2,2))
> plot(trunc.freqbinb[1,],barkspec$rotation[,1],main="resonances, pc1",ylim=c(-0.15,0.15))
> plot(trunc.freqbinb[1,],barkspec$rotation[,2],main="resonances, pc2",ylim=c(-0.15,0.15))
> plot(foo3$rotation[,1],main="areas, pc1",ylim=c(-0.4,0.3))
> plot(foo3$rotation[,2],main="areas, pc2",ylim=c(-0.4,0.3))

> which=abs(barkspec$rotation[,1])>=max(abs(barkspec$rotation[,1:2]))*0.8
> temp[which]
 [1]  89  90  96  97  99 100 101 106 107 108 111 113 114 115 116 117 118 119 120 126 127 131 132 135
> trunc.freqbinb[1,which]
 [1]  6.666299  6.745442  7.220299  7.299442  7.457727  7.536870  7.616013  8.011727  8.090870  8.170013  8.407441  8.565726  8.644869  8.724012  8.803155
[16]  8.882298  8.961440  9.040583  9.119726  9.594583  9.673726  9.990297 10.069440 10.306868
> bark(trunc.freqbinb[1,which],inv=T)
 [1]  719.1273  729.9816  797.0002  808.4960  831.7776  843.5659  855.4542  916.4405  928.9562  941.5812  980.1274 1006.3988 1019.7114 1033.1440 1046.6983
[16] 1060.3758 1074.1784 1088.1078 1102.1656 1189.3129 1204.3220 1265.8169 1281.5659 1329.7493
> barkspec$rotation[which,1]
 [1] 0.1112631 0.1112216 0.1099872 0.1089418 0.1098653 0.1112098 0.1102093 0.1104261 0.1114465 0.1102485 0.1099436 0.1107620 0.1152754 0.1155577 0.1153932
[16] 0.1158671 0.1161153 0.1142267 0.1110970 0.1120386 0.1098788 0.1126650 0.1111942 0.1089124
> which=abs(barkspec$rotation[,2])>=max(abs(barkspec$rotation[,1:2]))*0.8
> temp[which]
 [1]  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 47 48 49 50 51
> which=abs(barkspec$rotation[,2])>=max(abs(barkspec$rotation[,1:2]))-max(abs(barkspec$rotation[,1:2]))*0.2
> temp[which]
 [1]  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 47 48 49 50 51
> trunc.freqbinb[1,which]
 [1] -0.13998079 -0.06083799  0.01830480  0.09744759  0.17659039  0.25573318  0.33487597  0.41401877  0.49316156  0.57230435  0.65144715  0.73058994
[13]  0.80973273  0.88887553  0.96801832  1.04716111  1.12630391  1.20544670  1.28458949  1.36373229  1.44287508  1.52201787  1.60116067  1.68030346
[25]  1.75944625  1.83858905  1.91773184  1.99687463  2.07601743  2.15516022  2.23430301  2.31344581  2.39258860  2.47173139  2.55087419  3.34230212
[37]  3.42144491  3.50058770  3.57973050  3.65887329
> bark(trunc.freqbinb[1,which],inv=T)
 [1]  28.93407  34.90996  40.92186  46.97011  53.05503  59.17696  65.33624  71.53321  77.76823  84.04163  90.35377  96.70502 103.09574 109.52630 115.99708
[16] 122.50844 129.06078 135.65448 142.28994 148.96755 155.68771 162.45084 169.25735 176.10765 183.00217 189.94135 196.92561 203.95539 211.03114 218.15333
[31] 225.32239 232.53880 239.80303 247.11556 254.47686 330.88378 338.81547 346.80227 354.84476 362.94353
> barkspec$rotation[which,2]
 [1] -0.1317382 -0.1358588 -0.1359143 -0.1359295 -0.1359455 -0.1359639 -0.1359806 -0.1359994 -0.1360151 -0.1360290 -0.1360380 -0.1360419 -0.1360384
[14] -0.1360243 -0.1359977 -0.1359533 -0.1358910 -0.1357994 -0.1356829 -0.1355169 -0.1353187 -0.1350393 -0.1347196 -0.1342547 -0.1337471 -0.1329732
[27] -0.1321384 -0.1307700 -0.1292838 -0.1258162 -0.1224420 -0.1213541 -0.1179947 -0.1155299 -0.1114449 -0.1156517 -0.1211650 -0.1197152 -0.1166317
[40] -0.1100651


## So adding those remaining 56 columns made no difference.

> hist(barkspec$rotation[,1])
> hist(barkspec$rotation[,2])

## Wondered if I was being too severed with my 20% cut of - where there values very close to it, that weren't being included ? SO I looked at distribution of rotation values. Reset cut to be +- 0.1

> which=abs(barkspec$rotation[,2])>=0.1
> temp[which]
 [1]  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52
[51] 53
> trunc.freqbinb[1,which]
 [1] -0.13998079 -0.06083799  0.01830480  0.09744759  0.17659039  0.25573318  0.33487597  0.41401877  0.49316156  0.57230435  0.65144715  0.73058994
[13]  0.80973273  0.88887553  0.96801832  1.04716111  1.12630391  1.20544670  1.28458949  1.36373229  1.44287508  1.52201787  1.60116067  1.68030346
[25]  1.75944625  1.83858905  1.91773184  1.99687463  2.07601743  2.15516022  2.23430301  2.31344581  2.39258860  2.47173139  2.55087419  2.63001698
[37]  2.70915977  2.78830257  2.86744536  2.94658815  3.02573095  3.10487374  3.18401653  3.26315932  3.34230212  3.42144491  3.50058770  3.57973050
[49]  3.65887329  3.73801608  3.81715888
> bark(trunc.freqbinb[1,which],inv=T)
 [1]  28.93407  34.90996  40.92186  46.97011  53.05503  59.17696  65.33624  71.53321  77.76823  84.04163  90.35377  96.70502 103.09574 109.52630 115.99708
[16] 122.50844 129.06078 135.65448 142.28994 148.96755 155.68771 162.45084 169.25735 176.10765 183.00217 189.94135 196.92561 203.95539 211.03114 218.15333
[31] 225.32239 232.53880 239.80303 247.11556 254.47686 261.88743 269.34777 276.85837 284.41975 292.03242 299.69691 307.41375 315.18348 323.00664 330.88378
[46] 338.81547 346.80227 354.84476 362.94353 371.09917 379.31228
> barkspec$rotation[which,2]
 [1] -0.1317382 -0.1358588 -0.1359143 -0.1359295 -0.1359455 -0.1359639 -0.1359806 -0.1359994 -0.1360151 -0.1360290 -0.1360380 -0.1360419 -0.1360384
[14] -0.1360243 -0.1359977 -0.1359533 -0.1358910 -0.1357994 -0.1356829 -0.1355169 -0.1353187 -0.1350393 -0.1347196 -0.1342547 -0.1337471 -0.1329732
[27] -0.1321384 -0.1307700 -0.1292838 -0.1258162 -0.1224420 -0.1213541 -0.1179947 -0.1155299 -0.1114449 -0.1039458 -0.1027969 -0.1026005 -0.1030925
[40] -0.1014817 -0.1023402 -0.1078824 -0.1062947 -0.1087387 -0.1156517 -0.1211650 -0.1197152 -0.1166317 -0.1100651 -0.1044902 -0.1021748
> which=abs(barkspec$rotation[,1])>=0.1
> temp[which]
 [1]  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124
[39] 125 126 127 128 131 132 133 134 135 136
> trunc.freqbinb[1,which]
 [1]  6.349728  6.428871  6.508014  6.587157  6.666299  6.745442  6.824585  6.903728  6.982871  7.062013  7.141156  7.220299  7.299442  7.378585  7.457727
[16]  7.536870  7.616013  7.695156  7.932584  8.011727  8.090870  8.170013  8.249155  8.328298  8.407441  8.486584  8.565726  8.644869  8.724012  8.803155
[31]  8.882298  8.961440  9.040583  9.119726  9.198869  9.278012  9.357154  9.436297  9.515440  9.594583  9.673726  9.752868  9.990297 10.069440 10.148582
[46] 10.227725 10.306868 10.386011
> bark(trunc.freqbinb[1,which],inv=T)
 [1]  676.5722  687.0837  697.6794  708.3602  719.1273  729.9816  740.9241  751.9561  763.0786  774.2927  785.5995  797.0002  808.4960  820.0881  831.7776
[16]  843.5659  855.4542  867.4437  904.0328  916.4405  928.9562  941.5812  954.3172  967.1654  980.1274  993.2047 1006.3988 1019.7114 1033.1440 1046.6983
[31] 1060.3758 1074.1784 1088.1078 1102.1656 1116.3536 1130.6738 1145.1279 1159.7178 1174.4455 1189.3129 1204.3220 1219.4749 1265.8169 1281.5659 1297.4694
[46] 1313.5298 1329.7493 1346.1303
> barkspec$rotation[which,1]
 [1] 0.1009671 0.1048048 0.1079330 0.1087211 0.1112631 0.1112216 0.1074954 0.1078484 0.1055956 0.1048521 0.1051183 0.1099872 0.1089418 0.1082986 0.1098653
[16] 0.1112098 0.1102093 0.1059652 0.1025629 0.1104261 0.1114465 0.1102485 0.1073300 0.1082634 0.1099436 0.1061937 0.1107620 0.1152754 0.1155577 0.1153932
[31] 0.1158671 0.1161153 0.1142267 0.1110970 0.1040100 0.1050522 0.1039722 0.1047821 0.1081576 0.1120386 0.1098788 0.1022337 0.1126650 0.1111942 0.1085472
[46] 0.1066779 0.1089124 0.1054603

## SO nothing has changed much.


## Next try summing spectrum so that have one averaged value per bark value.	



bb.vtspec=matrix(ncol=20,nrow=110,byrow=T)
for(i in 1:110){
	for(j in 1:20) {
		which=abs(trunc.freqbinb[i,])>(j-1)&abs(trunc.freqbinb[i,])<=j
		bb.vtspec[i,j]=mean(trunc.vtspecb[j,which])
	}
}

bb.vtspec=matrix(ncol=20,nrow=110,byrow=T)
for(i in 1:110){
	for(j in 1:20) {
		which=abs(trunc.freqbinb[i,])>(j-1)&abs(trunc.freqbinb[i,])<=j
		bb.vtspec[i,j]=mean(trunc.vtspecb[j,which])
	}
}


> summary(prcomp(log(bb.vtspec)))
Importance of components:
                          PC1     PC2     PC3     PC4     PC5     PC6     PC7      PC8    PC9     PC10     PC11     PC12     PC13     PC14     PC15
Standard deviation     0.4852 0.06457 0.04343 0.02603 0.01996 0.01845 0.01196 0.009142 0.0069 0.005884 0.004936 0.003634 0.002883 0.002357 0.001454
Proportion of Variance 0.9678 0.01714 0.00776 0.00278 0.00164 0.00140 0.00059 0.000340 0.0002 0.000140 0.000100 0.000050 0.000030 0.000020 0.000010
Cumulative Proportion  0.9678 0.98493 0.99268 0.99547 0.99711 0.99851 0.99910 0.999440 0.9996 0.999780 0.999880 0.999930 0.999970 0.999990 1.000000
                            PC16     PC17      PC18      PC19 PC20
Standard deviation     0.0005298 0.000371 0.0002893 5.036e-17    0
Proportion of Variance 0.0000000 0.000000 0.0000000 0.000e+00    0
Cumulative Proportion  1.0000000 1.000000 1.0000000 1.000e+00    1

> summary(prcomp(log10(bb.vtspec)))
Importance of components:
                          PC1     PC2     PC3     PC4     PC5      PC6      PC7      PC8      PC9     PC10     PC11     PC12     PC13     PC14      PC15
Standard deviation     0.2107 0.02804 0.01886 0.01130 0.00867 0.008014 0.005194 0.003971 0.002997 0.002555 0.002144 0.001578 0.001252 0.001023 0.0006316
Proportion of Variance 0.9678 0.01714 0.00776 0.00278 0.00164 0.001400 0.000590 0.000340 0.000200 0.000140 0.000100 0.000050 0.000030 0.000020 0.0000100
Cumulative Proportion  0.9678 0.98493 0.99268 0.99547 0.99711 0.998510 0.999100 0.999440 0.999640 0.999780 0.999880 0.999930 0.999970 0.999990 1.0000000
                            PC16      PC17      PC18      PC19 PC20
Standard deviation     0.0002301 0.0001611 0.0001256 2.053e-18    0
Proportion of Variance 0.0000000 0.0000000 0.0000000 0.000e+00    0
Cumulative Proportion  1.0000000 1.0000000 1.0000000 1.000e+00    1


## THis isn't looking correct. Excellent separation - but meaningless PC1 PC2. Only a few bark bands are responsible for the separating; the 4th and 7th one - which corresponds to about 400, and 700 Hz - which doesn't really make sense - and the vowel plots of PC1 vs PC2 are not meaningful.
	

bb.vtspecII=matrix(ncol=20,nrow=110,byrow=T)
for(i in 1:110){
	for(j in 1:20) {
		which=abs(bark(trunc.freqbin[i,]))>(j-1)&abs(bark(trunc.freqbin[i,]))<=j
		bb.vtspecII[i,j]=mean(trunc.vtspec[j,which])
	}
}



> summary(prcomp(bb.vtspecII))
Importance of components:
                          PC1    PC2     PC3     PC4     PC5     PC6     PC7      PC8      PC9     PC10      PC11      PC12      PC13      PC14      PC15
Standard deviation     1.8375 0.9639 0.09090 0.03055 0.02487 0.01300 0.01054 0.005496 0.001991 0.001426 1.275e-16 4.838e-18 6.591e-19 4.521e-19 3.819e-19
Proportion of Variance 0.7824 0.2153 0.00191 0.00022 0.00014 0.00004 0.00003 0.000010 0.000000 0.000000 0.000e+00 0.000e+00 0.000e+00 0.000e+00 0.000e+00
Cumulative Proportion  0.7824 0.9977 0.99957 0.99978 0.99993 0.99997 0.99999 1.000000 1.000000 1.000000 1.000e+00 1.000e+00 1.000e+00 1.000e+00 1.000e+00
                            PC16      PC17 PC18 PC19 PC20
Standard deviation     7.779e-20 7.789e-21    0    0    0
Proportion of Variance 0.000e+00 0.000e+00    0    0    0 
Cumulative Proportion  1.000e+00 1.000e+00    1    1    1

## Some of the earlier frequency values when I rescaled to have equal spacing in the bark scale were a little odd - they were negative. SO I redid the exercise on the non bark scaled  spectra - the results were in some ways better - but still gave the 4th and 7th bark bands as the most important, and unrecogniseable distibution on the PC1 vs PC2 plots. In short - I think doing PCAs on the spectrums is better than on the bark banded spectra - I am just losing too much detail.


## The fact I didn't take the log of the spectrum values is irrelevant - nothing useful  is happening with this categorisation that I can see.

## So stick with the pcas on the spectrums. 


## Nov 12th 

## redid the truncated spectrums - since I set the -Inf to the wrong number - and this was causing a big problem.

 trunc.freqbin=matrix(,ncol=256,nrow=110,byrow=TRUE)
 trunc.vtspec=matrix(,ncol=256,nrow=110,byrow=TRUE)
 
 for(i in 1:110)
 {
 foo=approx(freqbins.t[i,1:endbin[i]],vtspec[i,1:endbin[i]],n=256)
 trunc.freqbin[i,1:256]=foo$x[1:256]
 trunc.vtspec[i,1:256]=foo$y[1:256]
 }
 
 
 trunc.freqbinb=matrix(,ncol=256,nrow=110,byrow=TRUE)
 trunc.vtspecb=matrix(,ncol=256,nrow=110,byrow=TRUE)
 
 for(i in 1:110)
 {
 foo=approx(bark(freqbins.t[i,1:endbin[i]]),vtspec[i,1:endbin[i]],n=256)
 trunc.freqbinb[i,1:256]=foo$x[1:256]
 trunc.vtspecb[i,1:256]=foo$y[1:256]
 }


## checking amplitude range of initial frequencies
> range(trunc.vtspecb[,1])
[1] 0.000000 1.240969
> range(trunc.vtspecb[,2])
[1] 0.08414787 1.24272972
> range(trunc.vtspecb[,3])
[1] 0.1682957 2.0200462


## Look at range if you take out the zeros in first freqbin ( not a lot of difference between barked scaled, and non barked scaled with this values, so just looked at barked scaled)
> range(trunc.vtspec[trunc.vtspec[,1]!=0,1])
[1] 0.1846767 1.2409691

## and whats the minimum range of equivalent samples in second freqbin
> range(trunc.vtspec[trunc.vtspec[,1]==0,2])
[1] 0.2338662 2.7330054

## Set zero in first freq bin to next smallest value - which is 0.185
> trunc.vtspec[trunc.vtspec[,1]==0,1]=0.185
trunc.vtspecb[trunc.vtspec[,1]==0.185,1]=0.084

## must only the male speakers - made booleen earlier

> summary(prcomp(log10(trunc.vtspec[!which,])))
Importance of components:
                          PC1    PC2    PC3     PC4     PC5     PC6    PC7     PC8     PC9    PC10   PC11    PC12    PC13    PC14    PC15    PC16    PC17
Standard deviation     3.7870 2.7628 2.6193 1.96986 1.90496 1.80244 1.6331 1.50669 1.31993 1.31451 1.2732 1.22969 1.10657 1.05410 1.01353 1.00332 0.91479
Proportion of Variance 0.2097 0.1116 0.1003 0.05674 0.05306 0.04751 0.0390 0.03319 0.02548 0.02527 0.0237 0.02211 0.01791 0.01625 0.01502 0.01472 0.01224
Cumulative Proportion  0.2097 0.3213 0.4216 0.47837 0.53144 0.57894 0.6179 0.65113 0.67661 0.70188 0.7256 0.74769 0.76560 0.78185 0.79687 0.81159 0.82382
                          PC18    PC19    PC20    PC21    PC22    PC23    PC24    PC25    PC26    PC27    PC28   PC29    PC30    PC31    PC32    PC33
Standard deviation     0.87996 0.84218 0.79576 0.78930 0.77013 0.73861 0.70243 0.68741 0.65380 0.63673 0.60825 0.5848 0.57399 0.55648 0.51732 0.48542
Proportion of Variance 0.01132 0.01037 0.00926 0.00911 0.00867 0.00798 0.00721 0.00691 0.00625 0.00593 0.00541 0.0050 0.00482 0.00453 0.00391 0.00345
Cumulative Proportion  0.83515 0.84552 0.85478 0.86389 0.87256 0.88054 0.88775 0.89466 0.90091 0.90684 0.91225 0.9173 0.92207 0.92660 0.93051 0.93396
                          PC34    PC35   PC36    PC37    PC38    PC39    PC40    PC41    PC42    PC43    PC44    PC45    PC46    PC47    PC48    PC49
Standard deviation     0.47889 0.46901 0.4607 0.45027 0.44023 0.43614 0.41448 0.40444 0.39070 0.38113 0.37403 0.36796 0.35747 0.34845 0.33732 0.33366
Proportion of Variance 0.00335 0.00322 0.0031 0.00296 0.00283 0.00278 0.00251 0.00239 0.00223 0.00212 0.00205 0.00198 0.00187 0.00178 0.00166 0.00163
Cumulative Proportion  0.93731 0.94053 0.9436 0.94659 0.94943 0.95221 0.95472 0.95711 0.95934 0.96147 0.96351 0.96549 0.96736 0.96914 0.97080 0.97243
                          PC50    PC51    PC52    PC53    PC54    PC55   PC56    PC57    PC58    PC59    PC60    PC61    PC62    PC63    PC64    PC65
Standard deviation     0.31896 0.31061 0.30470 0.30288 0.29570 0.29032 0.2860 0.27633 0.27125 0.26749 0.25995 0.25398 0.24938 0.24159 0.23856 0.23469
Proportion of Variance 0.00149 0.00141 0.00136 0.00134 0.00128 0.00123 0.0012 0.00112 0.00108 0.00105 0.00099 0.00094 0.00091 0.00085 0.00083 0.00081
Cumulative Proportion  0.97392 0.97533 0.97669 0.97803 0.97931 0.98054 0.9817 0.98285 0.98393 0.98497 0.98596 0.98690 0.98781 0.98867 0.98950 0.99030
                          PC66    PC67    PC68    PC69    PC70   PC71    PC72    PC73    PC74    PC75    PC76   PC77    PC78    PC79    PC80    PC81
Standard deviation     0.22320 0.22230 0.21406 0.21137 0.20933 0.2026 0.19740 0.19324 0.18951 0.18049 0.17601 0.1644 0.15908 0.15757 0.15461 0.14806
Proportion of Variance 0.00073 0.00072 0.00067 0.00065 0.00064 0.0006 0.00057 0.00055 0.00053 0.00048 0.00045 0.0004 0.00037 0.00036 0.00035 0.00032
Cumulative Proportion  0.99103 0.99176 0.99243 0.99308 0.99372 0.9943 0.99489 0.99544 0.99596 0.99644 0.99689 0.9973 0.99766 0.99802 0.99837 0.99869
                          PC82    PC83    PC84    PC85    PC86    PC87      PC88
Standard deviation     0.13827 0.13139 0.12538 0.11869 0.11207 0.10451 1.682e-15
Proportion of Variance 0.00028 0.00025 0.00023 0.00021 0.00018 0.00016 0.000e+00
Cumulative Proportion  0.99897 0.99922 0.99945 0.99966 0.99984 1.00000 1.000e+00

> summary(prcomp(log10(trunc.vtspecb[!which,])))
Importance of components:
                          PC1    PC2     PC3     PC4     PC5     PC6     PC7     PC8     PC9  PC10    PC11    PC12    PC13    PC14    PC15    PC16    PC17
Standard deviation     4.5921 2.9981 2.34551 2.12520 1.87144 1.61764 1.37791 1.29804 1.29196 1.146 1.09073 1.03268 0.97428 0.88507 0.88212 0.85704 0.85143
Proportion of Variance 0.3052 0.1301 0.07963 0.06537 0.05069 0.03788 0.02748 0.02439 0.02416 0.019 0.01722 0.01544 0.01374 0.01134 0.01126 0.01063 0.01049
Cumulative Proportion  0.3052 0.4354 0.51498 0.58035 0.63105 0.66892 0.69641 0.72080 0.74496 0.764 0.78118 0.79662 0.81036 0.82169 0.83296 0.84359 0.85408
                          PC18    PC19    PC20    PC21    PC22   PC23    PC24    PC25    PC26   PC27   PC28    PC29    PC30    PC31    PC32    PC33    PC34
Standard deviation     0.80079 0.78384 0.75510 0.72218 0.68915 0.6597 0.64162 0.64030 0.61275 0.5761 0.5514 0.54167 0.52520 0.50734 0.49833 0.46758 0.44466
Proportion of Variance 0.00928 0.00889 0.00825 0.00755 0.00687 0.0063 0.00596 0.00593 0.00543 0.0048 0.0044 0.00425 0.00399 0.00373 0.00359 0.00316 0.00286
Cumulative Proportion  0.86337 0.87226 0.88051 0.88806 0.89494 0.9012 0.90719 0.91313 0.91856 0.9234 0.9278 0.93202 0.93601 0.93973 0.94333 0.94649 0.94936
                          PC35    PC36    PC37    PC38    PC39    PC40    PC41    PC42    PC43    PC44    PC45    PC46    PC47    PC48   PC49   PC50
Standard deviation     0.43389 0.41736 0.41451 0.40356 0.40070 0.38939 0.37407 0.36136 0.35435 0.34861 0.33915 0.33047 0.32493 0.31632 0.3110 0.2992
Proportion of Variance 0.00272 0.00252 0.00249 0.00236 0.00232 0.00219 0.00203 0.00189 0.00182 0.00176 0.00166 0.00158 0.00153 0.00145 0.0014 0.0013
Cumulative Proportion  0.95208 0.95460 0.95709 0.95945 0.96177 0.96396 0.96599 0.96788 0.96970 0.97146 0.97312 0.97470 0.97623 0.97768 0.9791 0.9804
                          PC51    PC52    PC53    PC54    PC55    PC56    PC57    PC58   PC59    PC60    PC61    PC62    PC63    PC64   PC65    PC66
Standard deviation     0.29368 0.28101 0.27489 0.26758 0.26433 0.25992 0.25660 0.24108 0.2348 0.22557 0.22394 0.21801 0.21513 0.21028 0.2041 0.19610
Proportion of Variance 0.00125 0.00114 0.00109 0.00104 0.00101 0.00098 0.00095 0.00084 0.0008 0.00074 0.00073 0.00069 0.00067 0.00064 0.0006 0.00056
Cumulative Proportion  0.98162 0.98277 0.98386 0.98490 0.98591 0.98689 0.98784 0.98868 0.9895 0.99022 0.99094 0.99163 0.99230 0.99294 0.9935 0.99410
                          PC67    PC68    PC69    PC70    PC71    PC72    PC73    PC74    PC75    PC76    PC77    PC78    PC79   PC80    PC81    PC82
Standard deviation     0.19338 0.19103 0.18156 0.17721 0.17128 0.16185 0.15534 0.15030 0.14908 0.14071 0.13483 0.12623 0.12256 0.1162 0.11384 0.11030
Proportion of Variance 0.00054 0.00053 0.00048 0.00045 0.00042 0.00038 0.00035 0.00033 0.00032 0.00029 0.00026 0.00023 0.00022 0.0002 0.00019 0.00018
Cumulative Proportion  0.99464 0.99517 0.99565 0.99610 0.99652 0.99690 0.99725 0.99758 0.99790 0.99819 0.99845 0.99868 0.99890 0.9991 0.99928 0.99946
                          PC83    PC84    PC85    PC86    PC87      PC88
Standard deviation     0.10253 0.09595 0.08053 0.07724 0.07226 2.039e-15
Proportion of Variance 0.00015 0.00013 0.00009 0.00009 0.00008 0.000e+00
Cumulative Proportion  0.99961 0.99974 0.99984 0.99992 1.00000 1.000e+00



## Bark better - first two account for #43% of variation (infact as before)

## now for some plots.

eplot(x=pc.vtspecb$x[,1:2],labs=allMRI.df16$vow[!which],centroid=T,main="bark,men")
#There were 11 warnings (use warnings() to see them)
eplot(x=pc.vtspecb$x[,1:2],labs=allMRI.df16$vow[!which],dopoints=T,main="bark,men")
#There were 11 warnings (use warnings() to see them)
plot(bark(trunc.freqbinb[1,],inv=T),pc.vtspecb$rotation[,1],main="pc 1")
plot(bark(trunc.freqbinb[1,],inv=T),pc.vtspecb$rotation[,2],main="pc 2")

 
## THis is what happens if I include the woman in with the men

> pc.vtspecb=prcomp(log10(trunc.vtspecb))
> summary(pc.vtspecb)
Importance of components:
                          PC1    PC2     PC3     PC4    PC5     PC6    PC7     PC8     PC9    PC10    PC11    PC12    PC13    PC14    PC15    PC16    PC17
Standard deviation     4.5554 2.8512 2.33307 2.08056 1.8416 1.63598 1.4280 1.31754 1.23503 1.16455 1.12609 1.04017 0.96923 0.94862 0.93142 0.85590 0.81123
Proportion of Variance 0.3023 0.1184 0.07928 0.06305 0.0494 0.03898 0.0297 0.02528 0.02222 0.01975 0.01847 0.01576 0.01368 0.01311 0.01264 0.01067 0.00959
Cumulative Proportion  0.3023 0.4207 0.49994 0.56299 0.6124 0.65137 0.6811 0.70635 0.72857 0.74832 0.76679 0.78255 0.79623 0.80934 0.82197 0.83264 0.84223
                          PC18    PC19    PC20    PC21    PC22    PC23    PC24    PC25    PC26   PC27    PC28    PC29    PC30   PC31    PC32    PC33
Standard deviation     0.79304 0.76761 0.74344 0.71227 0.68583 0.66695 0.64607 0.62439 0.59994 0.5917 0.56411 0.55155 0.52564 0.5108 0.49535 0.48649
Proportion of Variance 0.00916 0.00858 0.00805 0.00739 0.00685 0.00648 0.00608 0.00568 0.00524 0.0051 0.00463 0.00443 0.00402 0.0038 0.00357 0.00345
Cumulative Proportion  0.85139 0.85997 0.86802 0.87541 0.88226 0.88874 0.89482 0.90050 0.90574 0.9108 0.91547 0.91990 0.92393 0.9277 0.93130 0.93475
                          PC34    PC35    PC36    PC37    PC38    PC39    PC40    PC41    PC42    PC43    PC44    PC45    PC46   PC47    PC48    PC49
Standard deviation     0.47367 0.45707 0.44095 0.43543 0.42117 0.41723 0.40691 0.38966 0.38070 0.36924 0.35867 0.35240 0.34615 0.3311 0.32913 0.32296
Proportion of Variance 0.00327 0.00304 0.00283 0.00276 0.00258 0.00254 0.00241 0.00221 0.00211 0.00199 0.00187 0.00181 0.00175 0.0016 0.00158 0.00152
Cumulative Proportion  0.93802 0.94106 0.94389 0.94665 0.94924 0.95177 0.95418 0.95640 0.95851 0.96049 0.96237 0.96418 0.96592 0.9675 0.96910 0.97061
                          PC50    PC51    PC52    PC53    PC54   PC55    PC56    PC57    PC58    PC59    PC60    PC61    PC62    PC63    PC64    PC65
Standard deviation     0.31446 0.30488 0.30427 0.29598 0.29298 0.2866 0.27916 0.27751 0.26900 0.26114 0.25114 0.24640 0.23723 0.23068 0.22898 0.22610
Proportion of Variance 0.00144 0.00135 0.00135 0.00128 0.00125 0.0012 0.00114 0.00112 0.00105 0.00099 0.00092 0.00088 0.00082 0.00078 0.00076 0.00074
Cumulative Proportion  0.97205 0.97341 0.97476 0.97603 0.97728 0.9785 0.97961 0.98074 0.98179 0.98278 0.98370 0.98459 0.98541 0.98618 0.98695 0.98769
                          PC66    PC67    PC68    PC69    PC70    PC71    PC72    PC73    PC74    PC75    PC76   PC77    PC78    PC79    PC80    PC81
Standard deviation     0.21541 0.21270 0.20835 0.20557 0.20079 0.19802 0.19226 0.18348 0.18073 0.17672 0.17351 0.1664 0.16196 0.16137 0.15823 0.15269
Proportion of Variance 0.00068 0.00066 0.00063 0.00062 0.00059 0.00057 0.00054 0.00049 0.00048 0.00045 0.00044 0.0004 0.00038 0.00038 0.00036 0.00034
Cumulative Proportion  0.98837 0.98902 0.98966 0.99027 0.99086 0.99143 0.99197 0.99246 0.99294 0.99339 0.99383 0.9942 0.99461 0.99499 0.99536 0.99570
                          PC82    PC83    PC84    PC85    PC86    PC87    PC88    PC89    PC90   PC91    PC92    PC93    PC94    PC95    PC96    PC97
Standard deviation     0.14884 0.14515 0.14046 0.13925 0.13256 0.12732 0.12312 0.12289 0.12065 0.1161 0.11315 0.10808 0.10472 0.10026 0.09525 0.09398
Proportion of Variance 0.00032 0.00031 0.00029 0.00028 0.00026 0.00024 0.00022 0.00022 0.00021 0.0002 0.00019 0.00017 0.00016 0.00015 0.00013 0.00013
Cumulative Proportion  0.99602 0.99633 0.99661 0.99690 0.99715 0.99739 0.99761 0.99783 0.99804 0.9982 0.99842 0.99859 0.99875 0.99890 0.99903 0.99916
                          PC98   PC99   PC100   PC101   PC102   PC103   PC104   PC105   PC106   PC107   PC108   PC109     PC110
Standard deviation     0.09059 0.0827 0.07852 0.07544 0.07355 0.06958 0.06938 0.06263 0.05968 0.05760 0.05315 0.04456 2.023e-15
Proportion of Variance 0.00012 0.0001 0.00009 0.00008 0.00008 0.00007 0.00007 0.00006 0.00005 0.00005 0.00004 0.00003 0.000e+00
Cumulative Proportion  0.99928 0.9994 0.99947 0.99955 0.99963 0.99970 0.99977 0.99983 0.99988 0.99993 0.99997 1.00000 1.000e+00

## SO only drops a bit.


eplot(x=pc.vtspecb$x[,1:2],labs=allMRI.df16$vow,centroid=T,main="bark,all")
#There were 11 warnings (use warnings() to see them)
eplot(x=pc.vtspecb$x[,1:2],labs=allMRI.df16$vow,dopoints=T,main="bark,all")
#There were 11 warnings (use warnings() to see them)
plot(bark(trunc.freqbinb[1,],inv=T),pc.vtspecb$rotation[,1],main="pc 1")
plot(bark(trunc.freqbinb[1,],inv=T),pc.vtspecb$rotation[,2],main="pc 2")


## Calculating the resonances

## This identifies the peaks - but there are some double ups.Found there were a number of instances where peak is two values of very similar values, so whilst by eye can clearly pick out peaks
## can't get these automatically by doing just the second difference.


vtres<-matrix(ncol=7,nrow=110,byrow=T)
resfreq<-matrix(ncol=7,nrow=110,byrow=T)
for(i in 1:110){
	out=diff(diff(vtspec[i,]))
	numbins=1:512
	index=numbins[out<=0]
	vtres[i,]=vtspec[i,index[2:8]+1]
	resfreq[i,]=freqbins.t[i,index[2:8]+1]
	}


## This identifies the unique peaks - requires previous step. The double up points (see above) are in consecutive freq bins - so find all instances where the difference between the 
## freq peaks is around 17 HZ, and take the second of these values. Only seemed to be double ups, no triple ups (or more)

## This works - although some only have 3 peaks - would like to try and have four peaks for each entry
## try and increase number of peaks above.



vtresIV<-matrix(ncol=6,nrow=110,byrow=T)
resfreqIV<-matrix(ncol=6,nrow=110,byrow=T)
for(i in 1:110){
	out=diff(resfreq[i,])
	k=1
	m=1
	for(j in 1:6) {
			if(out[j]>20){
					vtresIV[i,k]=vtres[i,m]
					resfreqIV[i,k]=resfreq[i,m]	
					k=k+1	
					   }
	
			m=m+1
	}
}
			

## There are 3 instances where there were too many double ups; and only three resonances were found. I tried to increase the number of peaks. As the maximum number of peaks should be 8 - given thelength was 16 tubes - then the easiest thing is just to hand correct the three values. I will copy the values from an earlier time when I did try and cinrease the number of peaks I'm storing ( values not given here)


resfreqIV[45,4]=resfreq[45,7]
resfreqIV[79,4]=resfreq[79,7]
resfreqIV[81,4]=resfreq[81,7]
vtresIV[81,4]=vtres[81,7]
vtresIV[79,4]=vtres[79,7]
vtresIV[45,4]=vtres[45,7]



## Now for the results
> prcomp(resfreqIV[,1:4])
Standard deviations:
 [1] 633.7446 364.4156 180.4813 130.1248

Rotation:
            PC1        PC2        PC3        PC4
[1,] 0.02113355 -0.2782790  0.4582475  0.8438740
[2,] 0.57668303  0.7846999  0.1681223  0.1530282
[3,] 0.57041298 -0.3190967 -0.7087875  0.2653800
[4,] 0.58448189 -0.4527517  0.5092783 -0.4404911

> prcomp(bark(resfreqIV[,1:4]))
Standard deviations:
[1] 1.9817559 1.4591557 0.7919221 0.2955547

Rotation:
            PC1        PC2        PC3         PC4
[1,] -0.2093570 0.91119280 -0.3418519 -0.09505037
[2,]  0.9228091 0.06558571 -0.3762328 -0.05070360
[3,]  0.2717721 0.30752927  0.7831575 -0.46715089
[4,]  0.1753083 0.26618028  0.3581207  0.87759024
> summary(prcomp(resfreqIV[,1:4]))
Importance of components:
                            PC1      PC2       PC3     PC4
Standard deviation     633.7446 364.4156 180.48126 130.125
Proportion of Variance   0.6878   0.2274   0.05578   0.029
Cumulative Proportion    0.6878   0.9152   0.97100   1.000

> summary(prcomp(bark(resfreqIV[,1:4])))
Importance of components:
                         PC1    PC2     PC3    PC4
Standard deviation     1.982 1.4592 0.79192 0.2956
Proportion of Variance 0.580 0.3145 0.09262 0.0129
Cumulative Proportion  0.580 0.8945 0.98710 1.0000


## Bark scaling a good idea - not only removes gender differences, but also speaker differences. EVen on Bark scale these are noticeable - although results don't change much with being gender selective

#(which points to male speakers)

summary(prcomp(resfreqIV[!which,1:4]))
summary(prcomp(bark(resfreqIV[!which,1:4])))
prcomp(bark(resfreqIV[!which,1:4]))
prcomp(resfreqIV[!which,1:4])


> summary(prcomp(resfreqIV[!which,1:4]))
Importance of components:
                            PC1      PC2       PC3       PC4
Standard deviation     568.7130 349.2159 175.26500 128.00953
Proportion of Variance   0.6567   0.2476   0.06237   0.03327
Cumulative Proportion    0.6567   0.9043   0.96673   1.00000
> summary(prcomp(bark(resfreqIV[!which,1:4])))
Importance of components:
                          PC1    PC2     PC3     PC4
Standard deviation     1.9211 1.4042 0.77511 0.29657
Proportion of Variance 0.5811 0.3105 0.09459 0.01385
Cumulative Proportion  0.5811 0.8916 0.98615 1.00000
> prcomp(bark(resfreqIV[!which,1:4]))
Standard deviations:
[1] 1.9211498 1.4042317 0.7751054 0.2965748

Rotation:
            PC1       PC2        PC3         PC4
[1,] -0.2682094 0.9129878 -0.2935945 -0.09120945
[2,]  0.9263217 0.1576172 -0.3360301 -0.06456560
[3,]  0.2102673 0.2701917  0.8007969 -0.49143514
[4,]  0.1605599 0.2619284  0.3995127  0.86371501
> prcomp(resfreqIV[!which,1:4])
Standard deviations:
[1] 568.7130 349.2159 175.2650 128.0095

Rotation:
             PC1        PC2        PC3        PC4
[1,] 0.003250875 -0.2703246  0.5040350  0.8202822
[2,] 0.605763197  0.7657894  0.1417425  0.1628699
[3,] 0.514116369 -0.3432437 -0.7158443  0.3247078
[4,] 0.607227091 -0.4718845  0.4619793 -0.4417866


###
(Checked plots for non bark scaled freq - PC1 vs PC2 does not give typical vowel plot - so not useful)

(Also checked if adding spectral values at res freq helped (log scaled) - it didn't really PC1 and PC2 accounted for less variance; in the rotation vectors R2 and R1 were the most important features - the amplitudes were all given low weights) Looked at PC1 vs PC2 plot - looked pretty similar to res freq only - Still a resonable spk variation)

> temp=prcomp(cbind(bark(resfreqIV[,1:4]),log10(vtresIV[,1:4])))
> temp
Standard deviations:
[1] 2.0026777 1.4614941 0.8145785 0.5437325 0.5261005 0.4792566 0.4581451 0.2714974

Rotation:
             PC1         PC2         PC3          PC4         PC5         PC6         PC7          PC8
[1,] -0.20985835  0.90853112 -0.32282511  0.035827322 -0.04528042  0.10446822 -0.07482929  0.080421861
[2,]  0.91227045  0.07125901 -0.36439175  0.009359890 -0.04539686 -0.08260010 -0.12336832  0.075580556
[3,]  0.26865683  0.30747951  0.74572526  0.050989501  0.23052405  0.01281995  0.14600219  0.447159298
[4,]  0.17181802  0.26702800  0.34830515  0.002183082 -0.07856213 -0.23799997  0.06805089 -0.842856131
[5,] -0.05482921  0.01802080  0.24198918 -0.337272917 -0.51588605 -0.24006504 -0.69060929  0.153773803
[6,] -0.08141880  0.01963078 -0.10767902 -0.311813244  0.77545504 -0.42550384 -0.31727252 -0.033428355
[7,]  0.05677214  0.04544272 -0.03998439 -0.881077968 -0.09225858  0.15969468  0.42752052  0.005187811
[8,]  0.09573833 -0.02950583  0.11759113 -0.093515749  0.24616027  0.81318395 -0.43915422 -0.229502195
> summary(temp)
Importance of components:
                         PC1    PC2     PC3     PC4     PC5     PC6     PC7     PC8
Standard deviation     2.003 1.4615 0.81458 0.54373 0.52610 0.47926 0.45815 0.27150
Proportion of Variance 0.508 0.2705 0.08404 0.03744 0.03505 0.02909 0.02658 0.00934
Cumulative Proportion  0.508 0.7785 0.86250 0.89994 0.93499 0.96408 0.99066 1.00000

	

### Comparing all 4 vowel spaces


eplot(foo3$x[,1:2],labs=allMRI.df[,3],centroid=TRUE,formant=T,main="Pareas")
eplot(x=pc.vtspecb$x[,1:2],labs=allMRI.df16$vow,centroid=T,formant=T,main="bark scaled spectra,all")
eplot(x=pc.resb$x[,1:2],labs=allMRI.df16$vow,centroid=T,main="bark res freq",formant=T)
eplot(x=pc.danielb$x[,1:2],labs=danielformant.df$vow,centroid=T,main="bark formant freq,all",formant=T)


eplot(foo3$x[,1:2],labs=allMRI.df[,3],dopoints=TRUE,formant=T,main="Pareas")
eplot(x=pc.vtspecb$x[,1:2],labs=allMRI.df16$vow,dopoints=T,formant=T,main="bark scaled spectra,all")
eplot(x=pc.resb$x[,1:2],labs=allMRI.df16$vow,dopoints=T,main="bark res freq",formant=T)
eplot(x=pc.danielb$x[,1:2],labs=danielformant.df$vow,dopoints=T,main="bark formant freq,all",formant=T)

eplot(foo3$x[,1:2],labs=allMRI.df[,1],centroid=TRUE,formant=T,main="Pareas")
eplot(x=pc.vtspecb$x[,1:2],labs=allMRI.df16$spk,centroid=T,formant=T,main="bark scaled spectra,all")
eplot(x=pc.resb$x[,1:2],labs=allMRI.df16$spk,centroid=T,main="bark res freq",formant=T)
eplot(x=pc.danielb$x[,1:2],labs=danielformant.df$spk,centroid=T,main="bark formant freq,all",formant=T)


eplot(foo3$x[,1:2],labs=allMRI.df[,1],dopoints=TRUE,formant=T,main="Pareas")
eplot(x=pc.vtspecb$x[,1:2],labs=allMRI.df16$spk,dopoints=T,formant=T,main="bark scaled spectra,all")
eplot(x=pc.resb$x[,1:2],labs=allMRI.df16$spk,dopoints=T,main="bark res freq",formant=T)
eplot(x=pc.danielb$x[,1:2],labs=danielformant.df$spk,dopoints=T,main="bark formant freq,all",formant=T)

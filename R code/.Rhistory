legend(0,40,c("Inte
plot (c(0,29),c(0,500),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[89,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[9],"distance_area","had.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT09 had vowel area functions")
legend(0,40,c("Interpolated on R and MATLAB","Interpolated in MATLAB only"), lty=c(1,1))
plot (c(0,29),c(0,500),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[89,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[9],"distance_area","had.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT09 had vowel area functions")
legend(0,40,c("Interpolated on R and MATLAB","Interpolated in MATLAB only"), lty=c(1,1))
plot (c(0,29),c(0,600),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[89,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[9],"distance_area","had.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT09 had vowel area functions")
legend(0,80,c("Interpolated on R and MATLAB","Interpolated in MATLAB only"), lty=c(1,1))
plot (c(0,29),c(0,650),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[89,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[9],"distance_area","had.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT09 had vowel area functions")
legend(0,100,c("Interpolated on R and MATLAB","Interpolated in MATLAB only"), lty=c(1,1))
plot (c(0,29),c(0,700),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[89,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[9],"distance_area","had.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT09 had vowel area functions")
legend(0,100,c("Interpolated on R and MATLAB","Interpolated in MATLAB only"), lty=c(1,1))
title(main = "VT09 'had' vowel area functions")
plot (c(0,29),c(0,300),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[14,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[2],"distance_area","head.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT02 'head' vowel area functions")
legend(0,40,c("Interpolated on R and MATLAB","Interpolated in MATLAB only"), lty=c(1,1))
# VT09 had: Comparing linearly interpolated area function with raw distance_area txt from MATLAB
plot (c(0,29),c(0,700),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[89,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[9],"distance_area","had.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT09 'had' vowel area functions")
legend(0,100,c("Interpolated on R and MATLAB","Interpolated in MATLAB only"), lty=c(1,1))
help(legend)
legend(0,100,c("Interpolated on R and MATLAB","Interpolated in MATLAB only"), lty=c(1,1), col=par("col"))
legend(0,100,c("Interpolated on R and MATLAB","Interpolated in MATLAB only"), lty=c(1,1), col=par("col"))
legend(0,100,c("Interpolated on R and MATLAB","Interpolated in MATLAB only"), lty=c(1,1), col=c("red","blue"))
plot (c(0,29),c(0,700),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[89,-(1:2)]), col="red")
lines(vt02e[,2], col="blue")
title(main = "VT09 'had' vowel area functions")
legend(0,100,c("Interpolated on R and MATLAB","Interpolated in MATLAB only"), lty=c(1,1), col=c("red","blue"))
graphics.off() # close all graphics windows
plot (c(0,29),c(0,300),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[14,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[2],"distance_area","head.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT02 'head' vowel area functions")
legend(0,40,c("Interpolated on R and MATLAB","Interpolated in MATLAB only"), lty=c(1,1), col=c("red","blue"))
# VT09 had: Comparing linearly interpolated area function with raw distance_area txt from MATLAB
plot (c(0,29),c(0,700),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[89,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[9],"distance_area","had.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT09 'had' vowel area functions")
legend(0,100,c("Interpolated on R and MATLAB","Interpolated in MATLAB only"), lty=c(1,1), col=c("red","blue"))
plot (c(0,29),c(0,300),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[14,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[2],"distance_area","head.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT02 'head' vowel area functions")
legend(0, 40, c("Interpolated on R","Raw area function"), lty=c(1,1), col=c("red","blue"))
# VT09 had: Comparing linearly interpolated area function with raw distance_area txt from MATLAB
plot (c(0,29),c(0,700),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[89,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[9],"distance_area","had.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT09 'had' vowel area functions")
legend(0, 100, c("Interpolated on R","Raw area function"), lty=c(1,1), col=c("red","blue"))
cor.test(pc.VTareas$x[,1],pc.resfreqIV$x[,1])
pca
pca <- NULL
for(i in numVTs){
spk <- VTlist[i]
spkData <- allSpeakers.df[grep(spk, allSpeakers.df$spk),4:30]
spkPCA <- prcomp(~., data=na.omit(allSpeakers.df[,4:30]/maxArea), scale=T)
pca[i] <- spkPCA
}
pca[1]
allSpeakers.df
allSpeakers.df[1:11,4:30]
vt1pca <- prcomp(~., data=na.omit(allSpeakers.df[1:11,4:30]/maxArea), scale=T)
vt2pca <- prcomp(~., data=na.omit(allSpeakers.df[12:22,4:30]/maxArea), scale=T)
vt1pca
levels(vt1pca)
vt1pca$rotation
cor.test(vt1pca$rotation, vt2pca$rotation)
vt1pca$rotation[,1]
vt2pca$rotation[,1]
cor.test(vt1pca$rotation[,1], vt2pca$rotation[,1])
cor.test(vt1pca$rotation[,1], vt1pca$rotation[,1])
plot(vt2pca$rotation[,1])
lines(vt1pca$rotation[,1])
plot (c(0,29),c(0,300),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(vt1pca$rotation[,1], col="red")
lines(vvt2pca$rotation[,1], col="blue")
title(main = "PC1 for VT01 and VT02 area function data points")
legend(0, 40, c("VT01","VT02"), lty=c(1,1), col=c("red","blue"))
plot(type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(vt1pca$rotation[,1], col="red")
lines(vvt2pca$rotation[,1], col="blue")
title(main = "PC1 for VT01 and VT02 area function data points")
legend(0, 40, c("VT01","VT02"), lty=c(1,1), col=c("red","blue"))
plot(type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
plot(c(0,28),c(0,0.5),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
plot(c(0,28),c(0,0.5),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(vt1pca$rotation[,1], col="red")
lines(vvt2pca$rotation[,1], col="blue")
title(main = "PC1 for VT01 and VT02 area function data points")
legend(0, 40, c("VT01","VT02"), lty=c(1,1), col=c("red","blue"))
plot(c(0,28),c(-0.5,0.5),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(vt1pca$rotation[,1], col="red")
lines(vvt2pca$rotation[,1], col="blue")
title(main = "PC1 for VT01 and VT02 area function data points")
legend(0, 40, c("VT01","VT02"), lty=c(1,1), col=c("red","blue"))
plot(c(0,28),c(-0.5,0.5),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(vt1pca$rotation[,1], col="red")
lines(vt2pca$rotation[,1], col="blue")
title(main = "PC1 for VT01 and VT02 area function data points")
legend(0, 40, c("VT01","VT02"), lty=c(1,1), col=c("red","blue"))
plot(c(0,28),c(-0.4,0.4),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(vt1pca$rotation[,1], col="red")
lines(vt2pca$rotation[,1], col="blue")
title(main = "PC1 for VT01 and VT02 area function data points")
legend(0, -0.3, c("VT01","VT02"), lty=c(1,1), col=c("red","blue"))
cor.test(vt1pca$rotation[,1], vt2pca$rotation[,1])
source('~/Part IV Project/R code/readAreaFunctions_1Set.R', echo=TRUE)
.libPaths('H:/Documents/Rlibraries')
library('emuR')
# Normalise for maximum area in each shape to eliminate interspeaker effects
# Excluding first column X1 because of unreliability of first frame of MRI images (lips are usually poorly defined), and last column X29
# e.g. VT09 shapes much bigger than others.
maxArea=apply(allSpeakers.df[,4:30],1,max)
pca <- prcomp(~., data=na.omit(allSpeakers.df[,4:30]/maxArea), scale=T)
pca.summ <- summary(pca)
levels(allSpeakers.df$vow) <- c("æ", "ɑː", "e", "iː", "ɜː", "ɪ", "ɔː", "ɒ", "ʊ", "ʌ", "uː")
colpalette <- c("firebrick4","chocolate4","darkgoldenrod","chartreuse4","aquamarine4","darkcyan","deepskyblue4","darkslateblue","darkorchid4","deeppink4","indianred4")
# Plot of PC1 and PC2, all vowels
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=F, formant=T, col=colpalette, doellipse = T, dopoints = T)
title(main = "Vowel properties (12 VTs x 1 Sets)", xlab = "PC1", ylab = "PC2")
# Compare with old 12VT1Set plot where hood was huddled in corner.
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=F, formant=T, col=colpalette, doellipse = F, dopoints = T, xlim = c(-6,6), ylim = c(-6, 6))
title(main = "Vowel properties (12 VTs x 1 Sets)", xlab = "PC1", ylab = "PC2")
# Plot of PC1 and PC2, centroids only
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=T, formant=T, col=colpalette, doellipse = T)
title(main = "Centroids of combined vowel properties (12 VTs x 1 Set)", xlab = "PC1", ylab = "PC2")
# Plot of standard deviations
plot(pca$sdev, type="p", xlab="Principal component #", ylab="Standard deviation")
title(main = "Standard deviations of principal components from combined dataset (12 VTs x 1 Set)")
# Plot of proportions of variance
pca.var <- pca.summ$importance[2,]
plot(pca.var, type="p", xlab="Principal component #", ylab="% Variance")
title(main = "Proportion of variance explained by principal components (12 VTs x 1 Set)")
# VT02 head: Comparing linearly interpolated area function with raw distance_area txt from MATLAB
plot (c(0,29),c(0,300),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[14,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[2],"Set1","distance_area","head.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT02 'head' vowel area functions")
legend(0, 40, c("Interpolated on R","Raw area function"), lty=c(1,1), col=c("red","blue"))
# VT09 had: Comparing linearly interpolated area function with raw distance_area txt from MATLAB
plot (c(0,29),c(0,700),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[89,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[9],"Set1","distance_area","had.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT09 'had' vowel area functions")
legend(0, 100, c("Interpolated on R","Raw area function"), lty=c(1,1), col=c("red","blue"))
vars
source('~/Part IV Project/R code/readAreaFunctions_1Set.R', echo=TRUE)
# Number of principal components to test
np <- 5
vars <- matrix(data = NA, nrow = numVTs, ncol = np, byrow = TRUE)
colnames(vars) <- 1:np
rownames(vars) <- VTlist
vars
# Normalise?
isNorm <- T
# Maximum areas for normalising. X1 is omitted since it is unreliable (MRI
# showed little of mouth opening at front of lips) and X29 omitted since it is
# the glottis which is always zero.
if (isNorm == T) { maxArea <- apply(allSpeakers.df[,4:30],1,max) }
for (p in 1:np) {
for(i in 1:numVTs) {
# Individual speaker PCAs with normalised area functions
if (isNorm == T) {
pca <- prcomp(~., data = allSpeakers.df[((i-1)*10 + i):(i*10 + i),4:30]/maxArea[((i-1)*10 + i):(i*10 + i)], scale=T)
} else {
pca1 <- prcomp(~., data = allSpeakers.df[((i-1)*10 + i):(i*10 + i),4:30], scale=T)
}
pca1
vars[i,j-1] <- unname(summary(pca1)$importance[2,])
}
}
unname(summary(pca1)$importance[2,])
unname(summary(pca)$importance[2,])
unname(summary(pca)$importance[2,1:np])
source('H:/Documents/Part IV Project/R code/variance_individual.R', echo=TRUE)
if (isNorm == T) {
write.csv(vars, file = paste("vars",p,"_normalised.csv",sep=""))
} else {
write.csv(vars, file = paste("vars",p,"_unnormalised.csv",sep=""))
}
source('~/Part IV Project/R code/readAreaFunctions_2Set.R', echo=TRUE)
barplot(vars)
source('H:/Documents/Part IV Project/R code/variance_individual.R', echo=TRUE)
do.call(rbind, vars)
?barplot
barplot(vars,beside=T)
barplot()vars
vars
t(Vars)
t(vars)
barplot(t(vars), beside=T, )
barplot(t(vars), beside=T, legend.text=TRUE)
barplot(t(vars), beside=T, legend.text=TRUE, borders=F)
barplot(t(vars), beside=T, legend.text=TRUE, borders=F)
barplot(t(vars), beside=T, legend.text=TRUE, border=F)
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", main="Variance accounted for by principal components", args.legend = list(x = "topleft", bty="n"))
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", main="Variance accounted for by principal components", args.legend = list(x = "topleft", bty="n", ncol=np))
apply
do.apply
?apply
colnames(vars) <- paste("PC", 1:np, sep="")
vars
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", main="Variance accounted for by principal components", args.legend = list(x = "topleft", bty="n", ncol=np))
?barplot
grid()
?grid
grid(col=1,lty=1)
col
grid(col="gray92",lty=1)
grid(col="gray92",lty=0)
grid(col="gray92",lty=2)
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", ylim=c(0,0.7), main="Variance accounted for by principal components", args.legend = list(x = "topleft", bty="n", ncol=np))
grid(col="gray92",lty=2)
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", ylim=c(0,0.7), main="Variance accounted for by principal components", args.legend = list(x = "topleft", bty="n", ncol=np))
grid(col="gray92",lty=0)
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", ylim=c(0,0.7), main="Variance accounted for by principal components", args.legend = list(x = "topleft", bty="n", ncol=np))
grid(col="gray92",lty=2)
par(new=T)
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", ylim=c(0,0.7), main="Variance accounted for by principal components", args.legend = list(x = "topleft", bty="n", ncol=np))
barplot(t(vars), beside=T, ylim=c(0,0.7), type="n")
plot(t(vars), beside=T, ylim=c(0,0.7), type="n")
grid(col="gray92",lty=1)
par(new=T)
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", ylim=c(0,0.7), main="Variance accounted for by principal components", args.legend = list(x = "topleft", bty="n", ncol=np))
barplot(t(vars), beside=T, ylim=c(0,0.7), type="n")
grid(col="gray92",lty=1)
par(new=T)
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", ylim=c(0,0.7), main="Variance accounted for by principal components", args.legend = list(x = "topleft", bty="n", ncol=np))
barplot(t(vars), beside=T, ylim=c(0,0.7), type="n", xaxt = 'n',xlab = '',yaxt = 'n')
grid(col="gray92",lty=1)
par(new=T)
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", ylim=c(0,0.7), main="Variance accounted for by principal components", args.legend = list(x = "topleft", bty="n", ncol=np))
?grid
grid(nx=0, ny=14, col="gray92",lty=1)
grid(nx=1, ny=14, col="gray92",lty=1)
barplot(t(vars), beside=T, ylim=c(0,0.7), type="n", xaxt = 'n',xlab = '',yaxt = 'n')
grid(nx=1, ny=14, col="gray92",lty=1)
par(new=T)
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", ylim=c(0,0.7), main="Variance accounted for by principal components", args.legend = list(x = "topleft", bty="n", ncol=np))
grid(nx=1, ny=14, col="gray90",lty=1)
barplot(t(vars), beside=T, ylim=c(0,0.7), type="n", xaxt = 'n',xlab = '',yaxt = 'n')
grid(nx=1, ny=14, col="gray70",lty=1)
par(new=T)
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", ylim=c(0,0.7), main="Variance accounted for by principal components", args.legend = list(x = "topleft", bty="n", ncol=np))
barplot(t(vars), beside=T, ylim=c(0,0.7), type="n", xaxt = 'n',xlab = '',yaxt = 'n')
grid(nx=1, ny=14, col="gray80",lty=1)
par(new=T)
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", ylim=c(0,0.7), main="Variance accounted for by principal components", args.legend = list(x = "topleft", bty="n", ncol=np))
colours <- c("slategray1","slategray3","slategray4")
barplot(t(vars), beside=T, ylim=c(0,0.7), type="n", xaxt = 'n',xlab = '',yaxt = 'n')
grid(nx=1, ny=14, col="gray80",lty=1)
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", ylim=c(0,0.7), main="Variance accounted for by principal components", args.legend = list(x = "topleft", bty="n", ncol=np), cols=colours)
colours <- c("slategray1","slategray3","slategray4")
colours <- c("slategray1","slategray3","slategray4")
barplot(t(vars), beside=T, ylim=c(0,0.7), type="n", xaxt = 'n',xlab = '',yaxt = 'n')
grid(nx=1, ny=14, col="gray80",lty=1)
par(new=T)
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", ylim=c(0,0.7), main="Variance accounted for by principal components", args.legend = list(x = "topleft", bty="n", ncol=np), cols=colours)
barplot(t(vars), beside=T, ylim=c(0,0.7), type="n", xaxt = 'n',xlab = '',yaxt = 'n',cols=c("slategray1","slategray3","slategray4"))
warnings()
barplot(t(vars), beside=T, ylim=c(0,0.7), type="n", xaxt = 'n',xlab = '',yaxt = 'n',col=c("slategray1","slategray3","slategray4"))
barplot(t(vars), beside=T, ylim=c(0,0.7), type="n", xaxt = 'n',xlab = '',yaxt = 'n',col=c("slategray4","slategray3","slategray1"))
barplot(t(vars), beside=T, ylim=c(0,0.7), type="n", xaxt = 'n',xlab = '',yaxt = 'n',col=c("slategray1","slategray3","slategray4"))
grid(nx=1, ny=14, col="gray80",lty=1)
par(new=T)
barcols <- c("slategray1","slategray3","slategray4")
barplot(t(vars), beside=T, ylim=c(0,0.7), type="n", xaxt = 'n',xlab = '',yaxt = 'n',col=barcols)
grid(nx=1, ny=14, col="gray80",lty=1)
par(new=T)
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", ylim=c(0,0.7), main="Variance accounted for by principal components", args.legend = list(x = "topleft", bty="n", ncol=np), col=barcols)
colnames(vars) <- c(paste("PC", 1:np, sep=""), "PC1+PC2")
colnames(vars) <- cbind(paste("PC", 1:np, sep=""), "PC1+PC2")
colnames
colnames(vars)
colnames(vars) <- [cbind(]paste("PC", 1:np, sep=""), "PC1+PC2"]
colnames(vars) <- [paste("PC", 1:np, sep=""), "PC1+PC2"]
colnames(vars) <- append(paste("PC", 1:np, sep=""), "PC1+PC2")
vars <- matrix(data = NA, nrow = numVTs, ncol = np+1, byrow = TRUE)
colnames(vars) <- c(paste("PC", 1:np, sep=""), "PC1+PC2")
colnames
colnames(vars
)
unname(summary(pca)$importance[2,1]) + unname(summary(pca)$importance[2,2])
summary(pca)$importance[2,1] + summary(pca)$importance[2,2]
source('H:/Documents/Part IV Project/R code/variance_individual.R', echo=TRUE)
?legend
barcols <- c("slategray1","slategray3","slategray4","sienna1")
barplot(t(vars), beside=T, ylim=c(0,0.85), type="n", xaxt = 'n',xlab = '',yaxt = 'n',col=barcols)
grid(nx=1, ny=14, col="gray80",lty=1)
par(new=T)
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", ylim=c(0,0.85), main="Variance accounted for by principal components", args.legend = list(x = "topleft", bty="n", ncol=np), col=barcols)
barplot(t(vars), beside=T, ylim=c(0,0.9), type="n", xaxt = 'n',xlab = '',yaxt = 'n',col=barcols)
grid(nx=1, ny=18, col="gray80",lty=1)
par(new=T)
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", ylim=c(0,0.9), main="Variance accounted for by principal components", args.legend = list(x = "topleft", bty="n", ncol=np), col=barcols)
barcols <- c("slategray1","slategray3","slategray4","sienna1")
barplot(t(vars), beside=T, ylim=c(0,0.9), type="n", xaxt = 'n',xlab = '',yaxt = 'n',col=barcols)
grid(nx=1, ny=18, col="gray80",lty=1)
par(new=T)
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", ylim=c(0,0.9), main="Variance accounted for by principal components", args.legend = list(x = "topleft", bty="n", ncol=np), col=barcols)
barplot(t(vars), beside=T, ylim=c(0,0.9), type="n",col=barcols)
barplot(t(vars), beside=T, xlim=c(0,0.9), type="n",col=barcols)
barplot(t(vars), beside=T, ylim=c(0,0.9), type="n",col=barcols)
# Plot as series bar graph
barcols <- c("slategray1","slategray3","slategray4","sienna1")
barplot(t(vars), beside=T, ylim=c(0,0.9), type="n",col=barcols)
grid(nx=1, ny=18, col="gray80",lty=1)
par(new=T)
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", ylim=c(0,0.9), main="Variance accounted for by principal components", args.legend = list(x = "topleft", bty="n", ncol=np), col=barcols)
source('H:/Documents/Part IV Project/R code/variance_individual.R', echo=TRUE)
vars[i,2:np+1]
vars
vars[i,1:np+1]
vars[i,0:np+1]
vars
source('H:/Documents/Part IV Project/R code/variance_individual.R', echo=TRUE)
source('H:/Documents/Part IV Project/R code/variance_individual.R', echo=TRUE)
colnames(vars)
vars[,1]
vars
vars[i,2:np+1]
vars[i,1:np+1]
vars[i,-1]
source('H:/Documents/Part IV Project/R code/variance_individual.R', echo=TRUE)
barplot(t(vars), beside=T, col=barcols, ylim=c(0,0.9))
grid(nx=1, ny=18, col="gray80",lty=1)
par(new=T)
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", ylim=c(0,0.9), main="Variance accounted for by principal components", args.legend = list(x = "topleft", bty="n", ncol=np), col=barcols)
?par
barplot(t(vars), beside=T, col=barcols, ylim=c(0,0.9), xpd = FALSE)
barplot(t(vars), beside=T, col=barcols, ylim=c(0,1))
grid(nx=1, ny=20, col="gray80",lty=1)
par(new=T)
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", ylim=c(0,0.9), main="Variance accounted for by principal components", args.legend = list(x = "topleft", bty="n", ncol=np), col=barcols)
barcols <- c("sienna1", "slategray1","slategray3","slategray4")
barplot(t(vars), beside=T, col=barcols, ylim=c(0,1))
grid(nx=1, ny=20, col="gray80",lty=1)
par(new=T)
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", ylim=c(0,1), main="Variance accounted for by principal components", args.legend = list(x = "topleft", bty="n", ncol=np), col=barcols)
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", ylim=c(0,1), main="Variance accounted for by principal components", args.legend = list(x = "topleft", bty="n", ncol=np+1), col=barcols)
barcols <- c("sienna1", "slategray1","slategray3","slategray4")
barplot(t(vars), beside=T, col=barcols, ylim=c(0,1))
grid(nx=1, ny=20, col="gray80",lty=1)
par(new=T)
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", ylim=c(0,1), main="Variance accounted for by principal components", args.legend = list(x = "topleft", bty="n", ncol=np+1), col=barcols)
barplot(t(vars), beside=T, col=barcols, ylim=c(0,0.9,0.1))
barcols <- c("sienna1", "slategray1","slategray3","slategray4")
barplot(t(vars), beside=T, col=barcols, ylim=c(0,0.9,0.1))
barplot(t(vars), beside=T, col=barcols, ylim=c(0,0.9), space=0.05)
barcols <- c("sienna1", "slategray1","slategray3","slategray4")
barplot(t(vars), beside=T, col=barcols, ylim=c(0,1))
grid(nx=1, ny=20, col="gray80",lty=1)
par(new=T)
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", ylim=c(0,1), main="Variance accounted for by principal components", args.legend = list(x = "topleft", bty="n", ncol=np+1), col=barcols)
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", ylim=c(0,1), main="Variance accounted for by principal components", args.legend = list(x = 0.9, y=1, bty="n", ncol=np+1), col=barcols)
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", ylim=c(0,1), main="Variance accounted for by principal components", args.legend = list(x = 0.9, y=10, bty="n", ncol=np+1), col=barcols)
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", ylim=c(0,1), main="Variance accounted for by principal components", args.legend = list(x = 0.9, y=1.5, bty="n", ncol=np+1), col=barcols)
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", ylim=c(0,1), main="Variance accounted for by principal components", args.legend = list(x = 0.9, y=0, bty="n", ncol=np+1), col=barcols)
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", ylim=c(0,1), main="Variance accounted for by principal components", args.legend = list(x = 9, y=0.9, bty="n", ncol=np+1), col=barcols)
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", ylim=c(0,1), main="Variance accounted for by principal components", args.legend = list(x = 50, y=1, bty="n", ncol=np+1), col=barcols)
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", ylim=c(0,1), main="Variance accounted for by principal components", args.legend = list(x="top", bty="n", ncol=np+1), col=barcols)
barcols <- c("sienna1", "slategray1","slategray3","slategray4")
barplot(t(vars), beside=T, col=barcols, ylim=c(0,1))
grid(nx=1, ny=20, col="gray80",lty=1)
par(new=T)
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", ylim=c(0,1), main="Variance accounted for by principal components", args.legend = list(x="top", bty="n", ncol=np+1), col=barcols)
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", ylim=c(0,1), main="Variance accounted for by principal components", args.legend = list(x="top", y=1, bty="n", ncol=np+1), col=barcols)
barcols <- c("sienna1", "slategray1","slategray3","slategray4")
barplot(t(vars), beside=T, col=barcols, ylim=c(0,1))
grid(nx=1, ny=20, col="gray80",lty=1)
par(new=T)
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", ylim=c(0,1), main="Variance accounted for by principal components", args.legend = list(x="top", y=0.9, bty="n", ncol=np+1), col=barcols)
barcols <- c("sienna1", "slategray1","slategray3","slategray4")
barplot(t(vars), beside=T, col=barcols, ylim=c(0,1))
grid(nx=1, ny=20, col="gray80",lty=1)
par(new=T)
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", ylim=c(0,1), main="Variance accounted for by principal components", args.legend = list(x="top", y=0.6, bty="n", ncol=np+1), col=barcols)
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", ylim=c(0,1), main="Variance accounted for by principal components", args.legend = list(x=60, y=0.6, bty="n", ncol=np+1), col=barcols)
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", ylim=c(0,1), main="Variance accounted for by principal components", args.legend = list(x=60, y=0.9, bty="n", ncol=np+1), col=barcols)
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", ylim=c(0,1), main="Variance accounted for by principal components", args.legend = list(x=50, y=0.95, bty="n", ncol=np+1), col=barcols)
barcols <- c("sienna1", "slategray1","slategray3","slategray4")
barplot(t(vars), beside=T, col=barcols, ylim=c(0,1))
grid(nx=1, ny=20, col="gray80",lty=1)
par(new=T)
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", ylim=c(0,1), main="Variance accounted for by principal components", args.legend = list(x=50, y=0.95, bty="n", ncol=np+1), col=barcols)
barcols <- c("sienna1", "slategray1","slategray3","slategray4")
barplot(t(vars), beside=T, col=barcols, ylim=c(0,1))
grid(nx=1, ny=20, col="gray80",lty=1)
par(new=T)
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", ylim=c(0,1), main="Variance accounted for by principal components", args.legend = list(x=54, y=0.105, bty="n", ncol=np+1), col=barcols)
barcols <- c("sienna1", "slategray1","slategray3","slategray4")
barplot(t(vars), beside=T, col=barcols, ylim=c(0,1))
grid(nx=1, ny=20, col="gray80",lty=1)
par(new=T)
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", ylim=c(0,1), main="Variance accounted for by principal components", args.legend = list(x=54, y=1.05, bty="n", ncol=np+1), col=barcols)
# Plot as series bar graph
barcols <- c("sienna1", "slategray1","slategray3","slategray4")
barplot(t(vars), beside=T, col=barcols, ylim=c(0,1))
grid(nx=1, ny=20, col="gray80",lty=1)
par(new=T)
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", ylim=c(0,1), main="Variance accounted for by principal components", args.legend = list(x=52, y=1.03, bty="n", ncol=np+1), col=barcols)
barcols <- c("sienna1", "slategray1","slategray3","slategray4")
barplot(t(vars), beside=T, col=barcols, ylim=c(0,1))
grid(nx=1, ny=20, col="gray80",lty=1)
par(new=T)
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", ylim=c(0,1), main="Variance accounted for by principal components", args.legend = list(x=50, y=1.03, bty="n", ncol=np+1), col=barcols)
abline(a=0.7, b=0, col="sienna1")
abline(a=0.7, b=0, col="sienna1", ltw=2)
abline(a=0.7, b=0, col="sienna1", lwd=2)
abline(a=0.7, b=0, col="sienna1", lwd=1)
barcols <- c("sienna1", "slategray1","slategray3","slategray4")
barplot(t(vars), beside=T, col=barcols, ylim=c(0,1))
grid(nx=1, ny=20, col="gray80",lty=1)
par(new=T)
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", ylim=c(0,1), main="Variance accounted for by principal components", args.legend = list(x=50, y=1.03, bty="n", ncol=np+1), col=barcols)
abline(a=0.7, b=0, col="sienna1", lwd=1)
barcols <- c("sienna1", "slategray1","slategray3","slategray4")
barplot(t(vars), beside=T, col=barcols, ylim=c(0,1))
grid(nx=1, ny=20, col="gray80",lty=1)
par(new=T)
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", ylim=c(0,1), main="Variance accounted for by principal components", args.legend = list(x=50, y=1.03, bty="n", ncol=np+1), col=barcols)
abline(a=0.7, b=0, col="sienna1", lwd=2)
barcols <- c("sienna1", "slategray1","slategray3","slategray4")
barplot(t(vars), beside=T, col=barcols, ylim=c(0,1))
grid(nx=1, ny=20, col="gray80",lty=1)
abline(a=0.7, b=0, col="sienna1", lwd=2)
par(new=T)
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", ylim=c(0,1), main="Variance accounted for by principal components", args.legend = list(x=50, y=1.03, bty="n", ncol=np+1), col=barcols)
barcols <- c("sienna1", "slategray1","slategray3","slategray4")
barplot(t(vars), beside=T, col=barcols, ylim=c(0,1))
grid(nx=1, ny=20, col="gray80",lty=1)
abline(a=0.7, b=0, col="sienna1", lwd=2)
par(new=T)
barplot(t(vars), beside=T, legend.text=TRUE, ylab="% Variance", ylim=c(0,1), main="Variance accounted for by principal components", args.legend = list(x=50, y=1.03, bty="n", ncol=np+1), col=barcols)
path<<-"H:\\Documents\\Part IV Project\\All VT data\\VT04\\Set1\\distance_area"
dir(path)
dir(path, full.names=F)
list.dir("H:\\Documents\\Part IV Project/All VT data/VT04/Set/")
list.dirs("H:\\Documents\\Part IV Project/All VT data/VT04/Set/")
list.dirs("H:\\Documents\\Part IV Project\\All VT data\\VT04\\Set\\")
list.dirs("H:\\Documents\\Part IV Project\\All VT data\\VT04\\Set", recursive=F, full.names=F)
VTname <- "VT04"
SetList <- list.dirs(path, recursive=FALSE, full.names=FALSE)
SetList
path<<-"H:\\Documents\\Part IV Project\\All VT data\\VT04\\"
SetList <- list.dirs(path, recursive=FALSE, full.names=FALSE)
SetList
path<<-"H:\\Documents\\Part IV Project\\All VT data\\VT04\\Set1\\"
SetList <- list.dirs(path, recursive=FALSE, full.names=FALSE)
SetList
SetList[c(3,4,7,8,12,13,17,18)]
areaFiles <- list.dirs(path, recursive=FALSE, full.names=FALSE)[c(3,4,7,8,12,13,17,18)]
numVowels <- length(areaFiles)
vowelNames <- vector(length=numVowels)
for(i in 1:numVowels) {
vowelNames[i] <- unlist(strsplit(areaFiles[i],"\\."))[1] # Remove .txt
}
vowelNames
areaFiles
path<<-"H:\\Documents\\Part IV Project\\All VT data\\VT04\\Set1\\distance_area"
VTname <- "VT04"
# List of vowel names (hadd, heed...) including repetitions
areaFiles <- list.dirs(path, recursive=FALSE, full.names=FALSE)[c(3,4,7,8,12,13,17,18)]
areaFiles
areaFiles <- dir(path)[c(3,4,7,8,12,13,17,18)]
areaFiles
dir(path)
dir(path)[c(1,2,5,6,10,11,15,16)]
dir(path)[c(1,2,5,6,10,11,14,15)]
areaFiles <- dir(path)[c(1,2,5,6,10,11,14,15)]
numVowels <- length(areaFiles)
vowelNames <- vector(length=numVowels)
for(i in 1:numVowels) {
vowelNames[i] <- unlist(strsplit(areaFiles[i],"\\."))[1] # Remove .txt
}
vowelNames
source('//uoa.auckland.ac.nz/engdfs/Home/jsah166/Documents/Part IV Project/R code/readAreaFunctions_2Reps.R', echo=TRUE)
allSpeakers.df()

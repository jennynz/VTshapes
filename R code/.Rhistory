source('~/Part IV Project/R code/readAreaFunctions_12VT1Set.R', echo=TRUE)
.libPaths('H:/Documents/Rlibraries')
library('emuR')
# Normalise for maximum area in each shape to eliminate interspeaker effects
# Excluding first column X1 because of unreliability of first frame of MRI images (lips are usually poorly defined), and last column X29
# e.g. VT09 shapes much bigger than others.
maxArea=apply(allSpeakers.df[,4:30],1,max)
pca <- prcomp(~., data=na.omit(allSpeakers.df[,4:30]/maxArea), scale=T)
pca.summ <- summary(pca)
levels(allSpeakers.df$vow)= c("æ", "ɑː", "e", "iː", "ɜː", "ɪ", "ɔː", "ɒ", "ʊ", "ʌ", "uː")
levels(allSpeakers.df$vow
)
colpalette = c("firebrick4","chocolate4","darkgoldenrod","chartreuse4","aquamarine4","darkcyan","deepskyblue4","darkslateblue","darkorchid4","deeppink4","indianred4")
# Plot of PC1 and PC2, centroids only
plot.new()
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=T, formant=T, col=T, xlim=c(-4,4), ylim=c(-4,4))
title(main="Centroids of combined vowel properties from 12 vocal tracts", xlab="PC1", ylab="PC2")
# Plot of PC1 and PC2, all vowels
plot.new()
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=F, formant=T, col=T, xlim=c(-7,6), ylim=c(-6,6))
text(pca$x[,1],pca$x[,2],labels=allSpeakers.df[,2])
title(main="Combined vowel properties from 12 vocal tracts", xlab="PC1", ylab="PC2")
# Plot of standard deviations
plot(1:length(pca$sdev),pca$sdev,type="p", xlab="Principal component #", ylab="Standard deviation")
title(main="Standard deviations of principal components from combined dataset")
# Plot of proportions of variance
pca.var <- pca.summ$importance[2,]
plot(1:length(pca.var),pca.var, type="p", xlab="Principal component #", ylab="% Variance")
title(main="Proportion of variance explained by principal components")
pca.summ
plot.new()
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=F, formant=T, col=colpalette, doellipse = T, dopoints = T)
title(main = "Vowel properties (12 VTs x 1 Sets)", xlab = "PC1", ylab = "PC2")
# Plot of PC1 and PC2, centroids only
plot.new()
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=T, formant=T, col=colpalette, doellipse = T)
title(main = "Centroids of combined vowel properties (12 VTs x 1 Set)", xlab = "PC1", ylab = "PC2")
# Plot of standard deviations
plot(pca$sdev, type="p", xlab="Principal component #", ylab="Standard deviation")
title(main = "Standard deviations of principal components from combined dataset (12 VTs x 1 Set)")
# Plot of proportions of variance
pca.var <- pca.summ$importance[2,]
plot(pca.var, type="p", xlab="Principal component #", ylab="% Variance")
title(main = "Proportion of variance explained by principal components (12 VTs x 1 Set)")
# Plot of PC1 and PC2, all vowels
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=F, formant=T, col=colpalette, doellipse = T, dopoints = T)
title(main = "Vowel properties (12 VTs x 1 Sets)", xlab = "PC1", ylab = "PC2")
# Plot of PC1 and PC2, centroids only
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=T, formant=T, col=colpalette, doellipse = T)
title(main = "Centroids of combined vowel properties (12 VTs x 1 Set)", xlab = "PC1", ylab = "PC2")
# Plot of standard deviations
plot(pca$sdev, type="p", xlab="Principal component #", ylab="Standard deviation")
title(main = "Standard deviations of principal components from combined dataset (12 VTs x 1 Set)")
# Plot of proportions of variance
pca.var <- pca.summ$importance[2,]
plot(pca.var, type="p", xlab="Principal component #", ylab="% Variance")
title(main = "Proportion of variance explained by principal components (12 VTs x 1 Set)")
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=F, formant=T, col=colpalette, doellipse = F, dopoints = T)
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=F, formant=T, col=colpalette, doellipse = T, dopoints = T)
pca.summ
pca.var
pca.var[1]+pca.var[2]
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=F, formant=T, col=colpalette, doellipse = T, dopoints = T, ylim = c(-7,7))
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=F, formant=T, col=colpalette, doellipse = T, dopoints = T, xlim = c(-7,7))
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=F, formant=T, col=colpalette, doellipse = T, dopoints = T, xlim = c(-7,7), ylim = c(-6, 6))
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=F, formant=T, col=colpalette, doellipse = T, dopoints = T, xlim = c(-6,), ylim = c(-6, 6))
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=F, formant=T, col=colpalette, doellipse = T, dopoints = T, xlim = c(-6,6), ylim = c(-6, 6))
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=F, formant=T, col=colpalette, doellipse = F, dopoints = T, xlim = c(-6,6), ylim = c(-6, 6))
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=F, formant=F, col=colpalette, doellipse = F, dopoints = T, xlim = c(-6,6), ylim = c(-6, 6))
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=F, formant=T, col=colpalette, doellipse = F, dopoints = T, xlim = c(-6,6), ylim = c(-6, 6))
title(main = "Vowel properties (12 VTs x 1 Sets)", xlab = "PC1", ylab = "PC2")
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=F, formant=F, col=colpalette, doellipse = F, dopoints = T, xlim = c(-6,6), ylim = c(-6, 6))
allSpeakers.df
allSpeakers.df[14,]
allSpeakers.df[14,3:]
allSpeakers.df[14,-1:2]
allSpeakers.df[14,-(1:2)]
plot(allSpeakers.df[14,-(1:2)])
levels(allSpeakers.df[14,-(1:2)])
typeof(allSpeakers.df[14,-(1:2)])
length(allSpeakers.df[14,-(1:2)])
plot(1:29, allSpeakers.df[14,-(1:2)])
help(plot)
plot(1:29, allSpeakers.df[14,-(1:2)], type="l")
plot(1:29, allSpeakers.df[14,-(1:2)], type="l", col="red")
dir(paste(path,VTlist[2],"distance_area",sep="\\"))
dir(paste(path,VTlist[2],"distance_area",sep="\\"))[3]
vt02e <- dir(paste(path,VTlist[2],"distance_area",sep="\\"))[3]
vt02e <- unlist(strsplit(vt02e, "\\."))
vt02e
dir(paste(path,VTlist[2],"distance_area",sep="\\"))
vt02e <- dir(paste(path,VTlist[2],"distance_area",sep="\\"))[3]
vt02e <- read.table(dir(paste(path,VTlist[2],"distance_area",sep="\\"))[3])
vt02e <- read.table(paste(path,VTlist[2],"distance_area",sep="\\"))[3])
paste(path,VTlist[2],"distance_area",sep="\\")[3]
paste(path,VTlist[2],"distance_area",sep="\\")
paste(path,VTlist[2],"distance_area","head.txt",sep="\\")
read.table(paste(path,VTlist[2],"distance_area","head.txt",sep="\\"))
vt02e <- read.table(paste(path,VTlist[2],"distance_area","head.txt",sep="\\"))
lines(vt02e, col="blue")
vt02e[,2]
lines(vt02e[,2], col="blue")
length(vt02e[,2])
legend(1,25,c("Interpolated on R","Interpolated in MATLAB"), lty=c(1,1))
plot (c(0,29),c(0,300),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(allSpeakers.df[14,-(1:2)], col="red")
vt02e <- read.table(paste(path,VTlist[2],"distance_area","head.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT02 e vowel area functions")
legend(1,50,c("Interpolated on R and MATLAB","Interpolated in MATLAB only"), lty=c(1,1))
lines(allSpeakers.df[14,-(1:2)], col="red")
allSpeakers.df[14,-(1:2)]
unlist(allSpeakers.df[14,-(1:2)])
lines(unlist(vt02e[,2]), col="blue")
lines(unlist(allSpeakers.df[14,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[2],"distance_area","head.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT02 e vowel area functions")
plot (c(0,29),c(0,300),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[14,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[2],"distance_area","head.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT02 e vowel area functions")
legend(0.5,40,c("Interpolated on R and MATLAB","Interpolated in MATLAB only"), lty=c(1,1))
legend(0,40,c("Interpolated on R and MATLAB","Interpolated in MATLAB only"), lty=c(1,1))
graphics.off() # close all graphics windows
rm(list=ls()) # clear workspace
source('~/Part IV Project/R code/readAreaFunctions_12VT1Set.R', echo=TRUE)
source('~/Part IV Project/R code/readAreaFunctions_12VT1Set.R', echo=TRUE)
.libPaths('H:/Documents/Rlibraries')
library('emuR')
# Normalise for maximum area in each shape to eliminate interspeaker effects
# Excluding first column X1 because of unreliability of first frame of MRI images (lips are usually poorly defined), and last column X29
# e.g. VT09 shapes much bigger than others.
maxArea=apply(allSpeakers.df[,4:30],1,max)
pca <- prcomp(~., data=na.omit(allSpeakers.df[,4:30]/maxArea), scale=T)
pca.summ <- summary(pca)
levels(allSpeakers.df$vow)= c("æ", "ɑː", "e", "iː", "ɜː", "ɪ", "ɔː", "ɒ", "ʊ", "ʌ", "uː")
colpalette = c("firebrick4","chocolate4","darkgoldenrod","chartreuse4","aquamarine4","darkcyan","deepskyblue4","darkslateblue","darkorchid4","deeppink4","indianred4")
# Plot of PC1 and PC2, all vowels
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=F, formant=T, col=colpalette, doellipse = T, dopoints = T)
title(main = "Vowel properties (12 VTs x 1 Sets)", xlab = "PC1", ylab = "PC2")
# Compare with old 12VT1Set plot where hood was huddled in corner.
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=F, formant=T, col=colpalette, doellipse = F, dopoints = T, xlim = c(-6,6), ylim = c(-6, 6))
title(main = "Vowel properties (12 VTs x 1 Sets)", xlab = "PC1", ylab = "PC2")
# Plot of PC1 and PC2, centroids only
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=T, formant=T, col=colpalette, doellipse = T)
title(main = "Centroids of combined vowel properties (12 VTs x 1 Set)", xlab = "PC1", ylab = "PC2")
# Plot of standard deviations
plot(pca$sdev, type="p", xlab="Principal component #", ylab="Standard deviation")
title(main = "Standard deviations of principal components from combined dataset (12 VTs x 1 Set)")
# Plot of proportions of variance
pca.var <- pca.summ$importance[2,]
plot(pca.var, type="p", xlab="Principal component #", ylab="% Variance")
title(main = "Proportion of variance explained by principal components (12 VTs x 1 Set)")
# Comparing linearly interpolated area function with
plot (c(0,29),c(0,300),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[14,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[2],"distance_area","head.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT02 e vowel area functions")
legend(0,40,c("Interpolated on R and MATLAB","Interpolated in MATLAB only"), lty=c(1,1))
unlist(allSpeakers.df[14,-(1:2)])
vt02e[,2]
allSpeakers.df
unlist(allSpeakers.df[89,-(1:2)])
plot (c(0,29),c(0,300),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[89,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[9],"distance_area","had.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT09 had vowel area functions")
legend(0,40,c("Interpolated on R and MATLAB","Interpolated in MATLAB only"), lty=c(1,1))
00),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[89,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[9],"distance_area","had.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT09 had vowel area functions")
legend(0,40,c("Inte
plot (c(0,29),c(0,500),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[89,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[9],"distance_area","had.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT09 had vowel area functions")
legend(0,40,c("Interpolated on R and MATLAB","Interpolated in MATLAB only"), lty=c(1,1))
plot (c(0,29),c(0,500),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[89,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[9],"distance_area","had.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT09 had vowel area functions")
legend(0,40,c("Interpolated on R and MATLAB","Interpolated in MATLAB only"), lty=c(1,1))
plot (c(0,29),c(0,600),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[89,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[9],"distance_area","had.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT09 had vowel area functions")
legend(0,80,c("Interpolated on R and MATLAB","Interpolated in MATLAB only"), lty=c(1,1))
plot (c(0,29),c(0,650),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[89,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[9],"distance_area","had.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT09 had vowel area functions")
legend(0,100,c("Interpolated on R and MATLAB","Interpolated in MATLAB only"), lty=c(1,1))
plot (c(0,29),c(0,700),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[89,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[9],"distance_area","had.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT09 had vowel area functions")
legend(0,100,c("Interpolated on R and MATLAB","Interpolated in MATLAB only"), lty=c(1,1))
title(main = "VT09 'had' vowel area functions")
plot (c(0,29),c(0,300),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[14,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[2],"distance_area","head.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT02 'head' vowel area functions")
legend(0,40,c("Interpolated on R and MATLAB","Interpolated in MATLAB only"), lty=c(1,1))
# VT09 had: Comparing linearly interpolated area function with raw distance_area txt from MATLAB
plot (c(0,29),c(0,700),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[89,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[9],"distance_area","had.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT09 'had' vowel area functions")
legend(0,100,c("Interpolated on R and MATLAB","Interpolated in MATLAB only"), lty=c(1,1))
help(legend)
legend(0,100,c("Interpolated on R and MATLAB","Interpolated in MATLAB only"), lty=c(1,1), col=par("col"))
legend(0,100,c("Interpolated on R and MATLAB","Interpolated in MATLAB only"), lty=c(1,1), col=par("col"))
legend(0,100,c("Interpolated on R and MATLAB","Interpolated in MATLAB only"), lty=c(1,1), col=c("red","blue"))
plot (c(0,29),c(0,700),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[89,-(1:2)]), col="red")
lines(vt02e[,2], col="blue")
title(main = "VT09 'had' vowel area functions")
legend(0,100,c("Interpolated on R and MATLAB","Interpolated in MATLAB only"), lty=c(1,1), col=c("red","blue"))
graphics.off() # close all graphics windows
plot (c(0,29),c(0,300),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[14,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[2],"distance_area","head.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT02 'head' vowel area functions")
legend(0,40,c("Interpolated on R and MATLAB","Interpolated in MATLAB only"), lty=c(1,1), col=c("red","blue"))
# VT09 had: Comparing linearly interpolated area function with raw distance_area txt from MATLAB
plot (c(0,29),c(0,700),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[89,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[9],"distance_area","had.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT09 'had' vowel area functions")
legend(0,100,c("Interpolated on R and MATLAB","Interpolated in MATLAB only"), lty=c(1,1), col=c("red","blue"))
plot (c(0,29),c(0,300),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[14,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[2],"distance_area","head.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT02 'head' vowel area functions")
legend(0, 40, c("Interpolated on R","Raw area function"), lty=c(1,1), col=c("red","blue"))
# VT09 had: Comparing linearly interpolated area function with raw distance_area txt from MATLAB
plot (c(0,29),c(0,700),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[89,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[9],"distance_area","had.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT09 'had' vowel area functions")
legend(0, 100, c("Interpolated on R","Raw area function"), lty=c(1,1), col=c("red","blue"))
cor.test(pc.VTareas$x[,1],pc.resfreqIV$x[,1])
pca
pca <- NULL
for(i in numVTs){
spk <- VTlist[i]
spkData <- allSpeakers.df[grep(spk, allSpeakers.df$spk),4:30]
spkPCA <- prcomp(~., data=na.omit(allSpeakers.df[,4:30]/maxArea), scale=T)
pca[i] <- spkPCA
}
pca[1]
allSpeakers.df
allSpeakers.df[1:11,4:30]
vt1pca <- prcomp(~., data=na.omit(allSpeakers.df[1:11,4:30]/maxArea), scale=T)
vt2pca <- prcomp(~., data=na.omit(allSpeakers.df[12:22,4:30]/maxArea), scale=T)
vt1pca
levels(vt1pca)
vt1pca$rotation
cor.test(vt1pca$rotation, vt2pca$rotation)
vt1pca$rotation[,1]
vt2pca$rotation[,1]
cor.test(vt1pca$rotation[,1], vt2pca$rotation[,1])
cor.test(vt1pca$rotation[,1], vt1pca$rotation[,1])
plot(vt2pca$rotation[,1])
lines(vt1pca$rotation[,1])
plot (c(0,29),c(0,300),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(vt1pca$rotation[,1], col="red")
lines(vvt2pca$rotation[,1], col="blue")
title(main = "PC1 for VT01 and VT02 area function data points")
legend(0, 40, c("VT01","VT02"), lty=c(1,1), col=c("red","blue"))
plot(type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(vt1pca$rotation[,1], col="red")
lines(vvt2pca$rotation[,1], col="blue")
title(main = "PC1 for VT01 and VT02 area function data points")
legend(0, 40, c("VT01","VT02"), lty=c(1,1), col=c("red","blue"))
plot(type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
plot(c(0,28),c(0,0.5),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
plot(c(0,28),c(0,0.5),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(vt1pca$rotation[,1], col="red")
lines(vvt2pca$rotation[,1], col="blue")
title(main = "PC1 for VT01 and VT02 area function data points")
legend(0, 40, c("VT01","VT02"), lty=c(1,1), col=c("red","blue"))
plot(c(0,28),c(-0.5,0.5),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(vt1pca$rotation[,1], col="red")
lines(vvt2pca$rotation[,1], col="blue")
title(main = "PC1 for VT01 and VT02 area function data points")
legend(0, 40, c("VT01","VT02"), lty=c(1,1), col=c("red","blue"))
plot(c(0,28),c(-0.5,0.5),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(vt1pca$rotation[,1], col="red")
lines(vt2pca$rotation[,1], col="blue")
title(main = "PC1 for VT01 and VT02 area function data points")
legend(0, 40, c("VT01","VT02"), lty=c(1,1), col=c("red","blue"))
plot(c(0,28),c(-0.4,0.4),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(vt1pca$rotation[,1], col="red")
lines(vt2pca$rotation[,1], col="blue")
title(main = "PC1 for VT01 and VT02 area function data points")
legend(0, -0.3, c("VT01","VT02"), lty=c(1,1), col=c("red","blue"))
cor.test(vt1pca$rotation[,1], vt2pca$rotation[,1])
setwd("~/Part IV Project/R code")
corr <- matrix(data = NA, nrow = 12, ncol = 12, byrow = TRUE)
source('~/Part IV Project/R code/readAreaFunctions_12VT1Set.R', echo=TRUE)
source('~/Part IV Project/R code/pca_12VT1Set_combined.R', echo=TRUE)
VTlist
?colnames
corr <- matrix(data = NA, nrow = 12, ncol = 12, byrow = TRUE)
colnames(corr) <- VTlist
rownames(corr) <- c("PC1", VTlist)
cprr
corr
colnames(corr)
colnames(corr) <- c("PC1", VTlist[-1])
corr
rownames(corr) <- c("PC1", VTlist[-numVTs])
rownames(corr)
corr
corr <- matrix(data = NA, nrow = 11, ncol = 11, byrow = TRUE)
colnames(corr) <- VTlist[-1]
rownames(corr) <- VTlist[-numVTs]
corr
corr[1,2] <- 4
corr
source('~/Part IV Project/R code/correlations_inter.R', echo=TRUE)
warnings()
cor$estimate
unlist(cor$estimate)
strip(cor$estimate)
unname(cor$estimate)
asd
asd
a
)
asda
d
as
sasa
sa
s
d
a
sa
source('~/Part IV Project/R code/correlations_inter.R', echo=TRUE)
source('~/Part IV Project/R code/correlations_inter.R', echo=TRUE)
warnings()
corr
corr[2,3]
corr[2][3]
corr[2][3] <- 4
corr[2, 3] <- 4
corr
source('~/Part IV Project/R code/correlations_inter.R', echo=TRUE)
corr
source('~/Part IV Project/R code/correlations_inter.R', echo=TRUE)
corr
corr
source('~/Part IV Project/R code/correlations_inter.R', echo=TRUE)
corr
View(corr)
View(corr)
?write.csv
write.csv(corr, file="correlationResults_inter_PC1")
write.csv(corr, file="correlationResults_inter_PC1.csv")
source('~/Part IV Project/R code/correlations_inter.R', echo=TRUE)
write.csv(corr, file="correlationResults_inter_PC2.csv")
source('~/Part IV Project/R code/correlations_inter.R', echo=TRUE)
write.csv(corr, file="correlationResults_inter_PC3.csv")
write.csv(pvalues, file="correlationResults_inter_PC3_pvalues.csv")
source('~/Part IV Project/R code/correlations_inter.R', echo=TRUE)
write.csv(pvalues, file="correlationResults_inter_PC2_pvalues.csv")
source('~/Part IV Project/R code/correlations_inter.R', echo=TRUE)
write.csv(pvalues, file="correlationResults_inter_PC1_pvalues.csv")
source('~/Part IV Project/R code/correlations_inter.R', echo=TRUE)
write.csv(corr, file="correlationResults_inter_PC2.csv")
write.csv(pvalues, file="correlationResults_inter_PC2_pvalues.csv")
rownames(pvalues)
rownames(corr)
colnames(pvalues) <- VTlist[-1]
rownames(pvalues) <- VTlist[-numVTs]
write.csv(pvalues, file="correlationResults_inter_PC2_pvalues.csv")
rownames(pvalues)
colnames(pvalues) <- VTlist[-1]
colnames(pvalues)
source('~/Part IV Project/R code/correlations_inter.R', echo=TRUE)
source('~/Part IV Project/R code/correlations_inter.R', echo=TRUE)
nResults_inter_PC2.csv")
write.csv(pvalues, file="correlationResults_inter_PC2_pvalues.csv")
write.csv(corr, file="correlationResults_inter_PC2.csv")
write.csv(pvalues, file="correlationResults_inter_PC2_pvalues.csv")
source('~/Part IV Project/R code/correlations_inter.R', echo=TRUE)
source('~/Part IV Project/R code/correlations_inter.R', echo=TRUE)

lines(vt02e[,2], col="blue")
title(main = "VT09 had vowel area functions")
legend(0,40,c("Inte
plot (c(0,29),c(0,500),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[89,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[9],"distance_area","had.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT09 had vowel area functions")
legend(0,40,c("Interpolated on R and MATLAB","Interpolated in MATLAB only"), lty=c(1,1))
plot (c(0,29),c(0,500),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[89,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[9],"distance_area","had.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT09 had vowel area functions")
legend(0,40,c("Interpolated on R and MATLAB","Interpolated in MATLAB only"), lty=c(1,1))
plot (c(0,29),c(0,600),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[89,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[9],"distance_area","had.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT09 had vowel area functions")
legend(0,80,c("Interpolated on R and MATLAB","Interpolated in MATLAB only"), lty=c(1,1))
plot (c(0,29),c(0,650),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[89,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[9],"distance_area","had.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT09 had vowel area functions")
legend(0,100,c("Interpolated on R and MATLAB","Interpolated in MATLAB only"), lty=c(1,1))
plot (c(0,29),c(0,700),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[89,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[9],"distance_area","had.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT09 had vowel area functions")
legend(0,100,c("Interpolated on R and MATLAB","Interpolated in MATLAB only"), lty=c(1,1))
title(main = "VT09 'had' vowel area functions")
plot (c(0,29),c(0,300),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[14,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[2],"distance_area","head.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT02 'head' vowel area functions")
legend(0,40,c("Interpolated on R and MATLAB","Interpolated in MATLAB only"), lty=c(1,1))
# VT09 had: Comparing linearly interpolated area function with raw distance_area txt from MATLAB
plot (c(0,29),c(0,700),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[89,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[9],"distance_area","had.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT09 'had' vowel area functions")
legend(0,100,c("Interpolated on R and MATLAB","Interpolated in MATLAB only"), lty=c(1,1))
help(legend)
legend(0,100,c("Interpolated on R and MATLAB","Interpolated in MATLAB only"), lty=c(1,1), col=par("col"))
legend(0,100,c("Interpolated on R and MATLAB","Interpolated in MATLAB only"), lty=c(1,1), col=par("col"))
legend(0,100,c("Interpolated on R and MATLAB","Interpolated in MATLAB only"), lty=c(1,1), col=c("red","blue"))
plot (c(0,29),c(0,700),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[89,-(1:2)]), col="red")
lines(vt02e[,2], col="blue")
title(main = "VT09 'had' vowel area functions")
legend(0,100,c("Interpolated on R and MATLAB","Interpolated in MATLAB only"), lty=c(1,1), col=c("red","blue"))
graphics.off() # close all graphics windows
plot (c(0,29),c(0,300),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[14,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[2],"distance_area","head.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT02 'head' vowel area functions")
legend(0,40,c("Interpolated on R and MATLAB","Interpolated in MATLAB only"), lty=c(1,1), col=c("red","blue"))
# VT09 had: Comparing linearly interpolated area function with raw distance_area txt from MATLAB
plot (c(0,29),c(0,700),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[89,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[9],"distance_area","had.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT09 'had' vowel area functions")
legend(0,100,c("Interpolated on R and MATLAB","Interpolated in MATLAB only"), lty=c(1,1), col=c("red","blue"))
plot (c(0,29),c(0,300),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[14,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[2],"distance_area","head.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT02 'head' vowel area functions")
legend(0, 40, c("Interpolated on R","Raw area function"), lty=c(1,1), col=c("red","blue"))
# VT09 had: Comparing linearly interpolated area function with raw distance_area txt from MATLAB
plot (c(0,29),c(0,700),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[89,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[9],"distance_area","had.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT09 'had' vowel area functions")
legend(0, 100, c("Interpolated on R","Raw area function"), lty=c(1,1), col=c("red","blue"))
cor.test(pc.VTareas$x[,1],pc.resfreqIV$x[,1])
pca
pca <- NULL
for(i in numVTs){
spk <- VTlist[i]
spkData <- allSpeakers.df[grep(spk, allSpeakers.df$spk),4:30]
spkPCA <- prcomp(~., data=na.omit(allSpeakers.df[,4:30]/maxArea), scale=T)
pca[i] <- spkPCA
}
pca[1]
allSpeakers.df
allSpeakers.df[1:11,4:30]
vt1pca <- prcomp(~., data=na.omit(allSpeakers.df[1:11,4:30]/maxArea), scale=T)
vt2pca <- prcomp(~., data=na.omit(allSpeakers.df[12:22,4:30]/maxArea), scale=T)
vt1pca
levels(vt1pca)
vt1pca$rotation
cor.test(vt1pca$rotation, vt2pca$rotation)
vt1pca$rotation[,1]
vt2pca$rotation[,1]
cor.test(vt1pca$rotation[,1], vt2pca$rotation[,1])
cor.test(vt1pca$rotation[,1], vt1pca$rotation[,1])
plot(vt2pca$rotation[,1])
lines(vt1pca$rotation[,1])
plot (c(0,29),c(0,300),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(vt1pca$rotation[,1], col="red")
lines(vvt2pca$rotation[,1], col="blue")
title(main = "PC1 for VT01 and VT02 area function data points")
legend(0, 40, c("VT01","VT02"), lty=c(1,1), col=c("red","blue"))
plot(type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(vt1pca$rotation[,1], col="red")
lines(vvt2pca$rotation[,1], col="blue")
title(main = "PC1 for VT01 and VT02 area function data points")
legend(0, 40, c("VT01","VT02"), lty=c(1,1), col=c("red","blue"))
plot(type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
plot(c(0,28),c(0,0.5),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
plot(c(0,28),c(0,0.5),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(vt1pca$rotation[,1], col="red")
lines(vvt2pca$rotation[,1], col="blue")
title(main = "PC1 for VT01 and VT02 area function data points")
legend(0, 40, c("VT01","VT02"), lty=c(1,1), col=c("red","blue"))
plot(c(0,28),c(-0.5,0.5),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(vt1pca$rotation[,1], col="red")
lines(vvt2pca$rotation[,1], col="blue")
title(main = "PC1 for VT01 and VT02 area function data points")
legend(0, 40, c("VT01","VT02"), lty=c(1,1), col=c("red","blue"))
plot(c(0,28),c(-0.5,0.5),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(vt1pca$rotation[,1], col="red")
lines(vt2pca$rotation[,1], col="blue")
title(main = "PC1 for VT01 and VT02 area function data points")
legend(0, 40, c("VT01","VT02"), lty=c(1,1), col=c("red","blue"))
plot(c(0,28),c(-0.4,0.4),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(vt1pca$rotation[,1], col="red")
lines(vt2pca$rotation[,1], col="blue")
title(main = "PC1 for VT01 and VT02 area function data points")
legend(0, -0.3, c("VT01","VT02"), lty=c(1,1), col=c("red","blue"))
cor.test(vt1pca$rotation[,1], vt2pca$rotation[,1])
source('~/Part IV Project/R code/readAreaFunctions_1Set.R', echo=TRUE)
.libPaths('H:/Documents/Rlibraries')
library('emuR')
# Normalise for maximum area in each shape to eliminate interspeaker effects
# Excluding first column X1 because of unreliability of first frame of MRI images (lips are usually poorly defined), and last column X29
# e.g. VT09 shapes much bigger than others.
maxArea=apply(allSpeakers.df[,4:30],1,max)
pca <- prcomp(~., data=na.omit(allSpeakers.df[,4:30]/maxArea), scale=T)
pca.summ <- summary(pca)
levels(allSpeakers.df$vow) <- c("æ", "ɑː", "e", "iː", "ɜː", "ɪ", "ɔː", "ɒ", "ʊ", "ʌ", "uː")
colpalette <- c("firebrick4","chocolate4","darkgoldenrod","chartreuse4","aquamarine4","darkcyan","deepskyblue4","darkslateblue","darkorchid4","deeppink4","indianred4")
# Plot of PC1 and PC2, all vowels
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=F, formant=T, col=colpalette, doellipse = T, dopoints = T)
title(main = "Vowel properties (12 VTs x 1 Sets)", xlab = "PC1", ylab = "PC2")
# Compare with old 12VT1Set plot where hood was huddled in corner.
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=F, formant=T, col=colpalette, doellipse = F, dopoints = T, xlim = c(-6,6), ylim = c(-6, 6))
title(main = "Vowel properties (12 VTs x 1 Sets)", xlab = "PC1", ylab = "PC2")
# Plot of PC1 and PC2, centroids only
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=T, formant=T, col=colpalette, doellipse = T)
title(main = "Centroids of combined vowel properties (12 VTs x 1 Set)", xlab = "PC1", ylab = "PC2")
# Plot of standard deviations
plot(pca$sdev, type="p", xlab="Principal component #", ylab="Standard deviation")
title(main = "Standard deviations of principal components from combined dataset (12 VTs x 1 Set)")
# Plot of proportions of variance
pca.var <- pca.summ$importance[2,]
plot(pca.var, type="p", xlab="Principal component #", ylab="% Variance")
title(main = "Proportion of variance explained by principal components (12 VTs x 1 Set)")
# VT02 head: Comparing linearly interpolated area function with raw distance_area txt from MATLAB
plot (c(0,29),c(0,300),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[14,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[2],"Set1","distance_area","head.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT02 'head' vowel area functions")
legend(0, 40, c("Interpolated on R","Raw area function"), lty=c(1,1), col=c("red","blue"))
# VT09 had: Comparing linearly interpolated area function with raw distance_area txt from MATLAB
plot (c(0,29),c(0,700),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[89,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[9],"Set1","distance_area","had.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT09 'had' vowel area functions")
legend(0, 100, c("Interpolated on R","Raw area function"), lty=c(1,1), col=c("red","blue"))
source('~/Part IV Project/R code/pca_1Set_combined.R', echo=TRUE)
levels(allSpeakers.df$vow) <- c("æ", "ɑː", "e", "iː", "ɜː", "ɪ", "ɔː", "ɒ", "ʊ", "ʌ", "uː")
colpalette <- c("firebrick4","chocolate4","darkgoldenrod","chartreuse4","aquamarine4","darkcyan","deepskyblue4","darkslateblue","darkorchid4","deeppink4","indianred4")
.libPaths('H:/Documents/Rlibraries')
library('emuR')
maxArea <- apply(allSpeakers.df[,4:30],1,max)
pca <- prcomp(~., data = allSpeakers.df[,4:30]/maxArea, scale=T)
pca.summ <- summary(pca)
# Plot of PC1 and PC2, all vowels
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=F, formant=T, col=colpalette, doellipse = T, dopoints = T)
title(main = "Vowel properties (12 VTs x 1 Sets)", xlab = "PC1", ylab = "PC2")
# Compare with old 12VT1Set plot where hood was huddled in corner.
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=F, formant=T, col=colpalette, doellipse = F, dopoints = T, xlim = c(-6,6), ylim = c(-6, 6))
title(main = "Vowel properties (12 VTs x 1 Sets)", xlab = "PC1", ylab = "PC2")
# Plot of PC1 and PC2, centroids only
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=T, formant=T, col=colpalette, doellipse = T)
title(main = "Centroids of combined vowel properties (12 VTs x 1 Set)", xlab = "PC1", ylab = "PC2")
# Plot of standard deviations
plot(pca$sdev, type="p", xlab="Principal component #", ylab="Standard deviation")
title(main = "Standard deviations of principal components from combined dataset (12 VTs x 1 Set)")
# Plot of proportions of variance
pca.var <- pca.summ$importance[2,]
plot(pca.var, type="p", xlab="Principal component #", ylab="% Variance")
title(main = "Proportion of variance explained by principal components (12 VTs x 1 Set)")
# VT02 head: Comparing linearly interpolated area function with raw distance_area txt from MATLAB
plot (c(0,29),c(0,300),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[14,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[2],"Set1","distance_area","head.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT02 'head' vowel area functions")
legend(0, 40, c("Interpolated on R","Raw area function"), lty=c(1,1), col=c("red","blue"))
# VT09 had: Comparing linearly interpolated area function with raw distance_area txt from MATLAB
plot (c(0,29),c(0,700),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[89,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[9],"Set1","distance_area","had.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT09 'had' vowel area functions")
legend(0, 100, c("Interpolated on R","Raw area function"), lty=c(1,1), col=c("red","blue"))
?legend
legend("bottomleft", c("Interpolated on R","Raw area function"), lty=c(1,1), col=c("red","blue"))
graphics.off() # close all graphics windows
# Plot of PC1 and PC2, all vowels
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=F, formant=T, col=colpalette, doellipse = T, dopoints = T)
title(main = "Vowel properties (12 VTs x 1 Sets)", xlab = "PC1", ylab = "PC2")
# Compare with old 12VT1Set plot where hood was huddled in corner.
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=F, formant=T, col=colpalette, doellipse = F, dopoints = T, xlim = c(-6,6), ylim = c(-6, 6))
title(main = "Vowel properties (12 VTs x 1 Sets)", xlab = "PC1", ylab = "PC2")
# Plot of PC1 and PC2, centroids only
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=T, formant=T, col=colpalette, doellipse = T)
title(main = "Centroids of combined vowel properties (12 VTs x 1 Set)", xlab = "PC1", ylab = "PC2")
# Plot of standard deviations
plot(pca$sdev, type="p", xlab="Principal component #", ylab="Standard deviation")
title(main = "Standard deviations of principal components from combined dataset (12 VTs x 1 Set)")
# Plot of proportions of variance
pca.var <- pca.summ$importance[2,]
plot(pca.var, type="p", xlab="Principal component #", ylab="% Variance")
title(main = "Proportion of variance explained by principal components (12 VTs x 1 Set)")
# VT02 head: Comparing linearly interpolated area function with raw distance_area txt from MATLAB
plot (c(0,29),c(0,300),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[14,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[2],"Set1","distance_area","head.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT02 'head' vowel area functions")
legend("bottomleft", c("Interpolated on R","Raw area function"), lty=c(1,1), col=c("red","blue"))
# VT09 had: Comparing linearly interpolated area function with raw distance_area txt from MATLAB
plot (c(0,29),c(0,700),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[89,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[9],"Set1","distance_area","had.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT09 'had' vowel area functions")
legend("bottomleft", c("Interpolated on R","Raw area function"), lty=c(1,1), col=c("red","blue"))
allSpeakers.df
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=T, formant=T, col=colpalette, doellipse = F)
title(main = "Vowel centroids on PC1-PC2 planes (12 VTs x 1 Set)", xlab = "PC1", ylab = "PC2")
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=T, formant=T, col=colpalette, doellipse = F, scaling = "mel")
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=T, formant=T, col=colpalette, doellipse = F)
title(main = "Vowel centroids on PC1-PC2 planes (12 VTs x 1 Set)", xlab = "PC1", ylab = "PC2")
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=T, formant=T, col=colpalette, doellipse = F, ylim = c(-4,4))
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=T, formant=T, col=colpalette, doellipse = F, xlim = c(-4,4))
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=F, formant=T, col=colpalette, doellipse = F, dopoints = T)
title(main = "Vowels on PC1-PC2 planes (12 VTs x 1 Sets)", xlab = "PC1", ylab = "PC2")
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=T, formant=T, col=colpalette, doellipse = F, xlim = c(-4,4))
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=F, formant=T, col=colpalette, doellipse = F, dopoints = T)
title(main = "Vowels on PC1-PC2 planes (12 VTs x 1 Sets)", xlab = "PC1", ylab = "PC2")
# VT02 head: Comparing linearly interpolated area function with raw distance_area txt from MATLAB
plot (c(0,29),c(0,300),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[14,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[2],"Set1","distance_area","head.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT02 'head' vowel area functions")
legend("bottomleft", c("Interpolated on R","Raw area function"), lty=c(1,1), col=c("red","blue"))
# VT09 had: Comparing linearly interpolated area function with raw distance_area txt from MATLAB
plot (c(0,29),c(0,700),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[89,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[9],"Set1","distance_area","had.txt",sep="\\"))
lines(vt02e[,2], col="blue")
title(main = "VT09 'had' vowel area functions")
legend("bottomleft", c("Interpolated on R","Raw area function"), lty=c(1,1), col=c("red","blue"))
plot (c(0,29),c(0,300),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)", col="darkred")
lines(unlist(allSpeakers.df[14,-(1:2)]), col="red")
plot (c(0,29),c(0,300),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)", col="firebrick4")
plot (c(0,29),c(0,300),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)", col="firebrick4")
lines(unlist(allSpeakers.df[14,-(1:2)]), col="red")
plot (c(0,29),c(0,300),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[14,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[2],"Set1","distance_area","head.txt",sep="\\"))
lines(vt02e[,2], col="firebrick4")
title(main = "VT02 'head' vowel area functions")
legend("bottomleft", c("Interpolated on R","Raw area function"), lty=c(1,1), col=c("red","firebrick4"))
lines(vt02e[,2], col="indianred4")
plot (c(0,29),c(0,300),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[14,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[2],"Set1","distance_area","head.txt",sep="\\"))
lines(vt02e[,2], col="indianred4")
?lines
plot (c(0,29),c(0,300),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)", lwd = 2)
lines(unlist(allSpeakers.df[14,-(1:2)]), col="red")
vt02e <- read.table(paste(path,VTlist[2],"Set1","distance_area","head.txt",sep="\\"))
lines(vt02e[,2], col="indianred4", lwd = 2)
lines(vt02e[,2], col="chartreuse4", lwd = 2)
lines(vt02e[,2], col="firebrick3", lwd = 2)
lines(unlist(allSpeakers.df[14,-(1:2)]), col="red", lwd = 2)
plot (c(0,29),c(0,700),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[14,-(1:2)]), col="red", lwd = 2)
vt02e <- read.table(paste(path,VTlist[2],"Set1","distance_area","head.txt",sep="\\"))
lines(vt02e[,2], col="firebrick3", lwd = 2)
# VT09 had: Comparing linearly interpolated area function with raw distance_area txt from MATLAB
lines(unlist(allSpeakers.df[89,-(1:2)]), col="blue")
vt09e <- read.table(paste(path,VTlist[9],"Set1","distance_area","had.txt",sep="\\"))
lines(vt09e[,2], col="aquamarine3")
title(main = "Raw and linearly interpolated area functions")
legend("bottomleft", c("VT02 head interpolated","VT02 head raw data", "VT04 had interpolated", "VT04 had raw data"), lty=c(1,1), col=c("red","firebrick3","blue","aquamarine3"))
plot (c(0,29),c(0,700),type="n", xlab="Data point", ylab="Cross-sectional area (mm^2)")
lines(unlist(allSpeakers.df[14,-(1:2)]), col="red", lwd = 2)
vt02e <- read.table(paste(path,VTlist[2],"Set1","distance_area","head.txt",sep="\\"))
lines(vt02e[,2], col="firebrick3", lwd = 2)
# VT09 had: Comparing linearly interpolated area function with raw distance_area txt from MATLAB
lines(unlist(allSpeakers.df[89,-(1:2)]), col="blue", lwd = 2)
vt09e <- read.table(paste(path,VTlist[9],"Set1","distance_area","had.txt",sep="\\"))
lines(vt09e[,2], col="deepskyblue3", lwd = 2)
title(main = "Raw and linearly interpolated area functions")
legend("bottomleft", c("VT02 head interpolated","VT02 head raw data", "VT04 had interpolated", "VT04 had raw data"), lty=c(1,1), col=c("red","firebrick3","blue","aquamarine3"))
legend("topright", c("VT02 head interpolated","VT02 head raw data", "VT04 had interpolated", "VT04 had raw data"), lty=c(1,1), col=c("red","firebrick3","blue","deepskyblue3"))
plot (c(0,29),c(0,700),type="n", xlab="Data point", ylab=expression(Cross-sectional ~ area ~ (mm^{-2})))
plot (c(0,29),c(0,700),type="n", xlab="Data point", ylab=expression(Cross-sectional ~ area ~ (mm^{2})))
lines(unlist(allSpeakers.df[14,-(1:2)]), col="red", lwd = 2)
vt02e <- read.table(paste(path,VTlist[2],"Set1","distance_area","head.txt",sep="\\"))
lines(vt02e[,2], col="firebrick3", lwd = 2)
# VT09 had: Comparing linearly interpolated area function with raw distance_area txt from MATLAB
lines(unlist(allSpeakers.df[89,-(1:2)]), col="blue", lwd = 2)
vt09e <- read.table(paste(path,VTlist[9],"Set1","distance_area","had.txt",sep="\\"))
lines(vt09e[,2], col="deepskyblue3", lwd = 2)
title(main = "Raw and linearly interpolated area functions")
legend("topright", c("VT02 head interpolated","VT02 head raw data", "VT04 had interpolated", "VT04 had raw data"), lty=c(1,1), col=c("red","firebrick3","blue","deepskyblue3"))
allSpeakers.df[89,(1:2)]
allSpeakers.df[14,(1:2)]
allSpeakers.df[13,(1:2)]
allSpeakers.df[11,(1:2)]
allSpeakers.df[12,(1:2)]
plot (c(0,29),c(0,700),type="n", xlab="Data point", ylab=expression(Cross-sectional ~ area ~ (mm^{2})))
lines(unlist(allSpeakers.df[12,-(1:2)]), col="red", lwd = 2)
vt02e <- read.table(paste(path,VTlist[2],"Set1","distance_area","had.txt",sep="\\"))
lines(vt02e[,2], col="firebrick3", lwd = 2)
# VT09 had: Comparing linearly interpolated area function with raw distance_area txt from MATLAB
lines(unlist(allSpeakers.df[89,-(1:2)]), col="blue", lwd = 2)
vt09e <- read.table(paste(path,VTlist[9],"Set1","distance_area","had.txt",sep="\\"))
lines(vt09e[,2], col="deepskyblue3", lwd = 2)
title(main = "Raw and linearly interpolated area functions for 'had' vowel")
legend("topright", c("VT02 interpolated","VT02 raw data", "VT04 interpolated", "VT04 raw data"), lty=c(1,1), col=c("red","firebrick3","blue","deepskyblue3"))
allSpeakers.df[15,(1:2)]
allSpeakers.df[12:17,(1:2)]
allSpeakers.df[88,(1:2)]
allSpeakers.df[93,(1:2)]
allSpeakers.df[92,(1:2)]
# VT02 heed: Comparing linearly interpolated area function with raw distance_area txt from MATLAB
plot (c(0,29),c(0,700),type="n", xlab="Data point", ylab=expression(Cross-sectional ~ area ~ (mm^{2})))
lines(unlist(allSpeakers.df[15,-(1:2)]), col="red", lwd = 2)
vt02e <- read.table(paste(path,VTlist[2],"Set1","distance_area","heed.txt",sep="\\"))
lines(vt02e[,2], col="firebrick3", lwd = 2)
# VT09 heed: Comparing linearly interpolated area function with raw distance_area txt from MATLAB
lines(unlist(allSpeakers.df[92,-(1:2)]), col="blue", lwd = 2)
vt09e <- read.table(paste(path,VTlist[9],"Set1","distance_area","heed.txt",sep="\\"))
lines(vt09e[,2], col="deepskyblue3", lwd = 2)
title(main = "Raw and linearly interpolated area functions for 'had' vowel")
legend("topright", c("VT02 interpolated","VT02 raw data", "VT04 interpolated", "VT04 raw data"), lty=c(1,1), col=c("red","firebrick3","blue","deepskyblue3"))
?legend
legend("topleft", c("VT02 interpolated","VT02 raw data", "VT04 interpolated", "VT04 raw data"), lty=c(1,1), col=c("red","firebrick3","blue","deepskyblue3"))
legend("topleft", bty="n", c("VT02 interpolated","VT02 raw data", "VT04 interpolated", "VT04 raw data"), lty=c(1,1), col=c("red","firebrick3","blue","deepskyblue3"))
plot (c(0,29),c(0,700),type="n", xlab="Data point", ylab=expression(Cross-sectional ~ area ~ (mm^{2})))
legend("topleft", bty="n", c("VT02 interpolated","VT02 raw data", "VT04 interpolated", "VT04 raw data"), lty=c(1,1), col=c("red","firebrick3","blue","deepskyblue3"))
plot (c(0,29),c(0,700),type="n", xlab="Data point", ylab=expression(Cross-sectional ~ area ~ (mm^{2})))
lines(unlist(allSpeakers.df[15,-(1:2)]), col="red", lwd = 2)
vt02e <- read.table(paste(path,VTlist[2],"Set1","distance_area","heed.txt",sep="\\"))
lines(vt02e[,2], col="firebrick3", lwd = 2)
# VT09 heed: Comparing linearly interpolated area function with raw distance_area txt from MATLAB
lines(unlist(allSpeakers.df[92,-(1:2)]), col="blue", lwd = 2)
vt09e <- read.table(paste(path,VTlist[9],"Set1","distance_area","heed.txt",sep="\\"))
lines(vt09e[,2], col="deepskyblue3", lwd = 2)
title(main = "Raw and linearly interpolated area functions for 'had' vowel")
legend("topleft", bty="n", c("VT02 interpolated","VT02 raw data", "VT04 interpolated", "VT04 raw data"), lty=c(1,1), col=c("red","firebrick3","blue","deepskyblue3"))
allSpeakers.df[30,1:2]
allSpeakers.df[35,1:2]
allSpeakers.df[36,1:2]
allSpeakers.df[37,1:2]
plot (c(0,29),c(0,700),type="n", xlab="Data point", ylab=expression(Cross-sectional ~ area ~ (mm^{2})))
lines(unlist(allSpeakers.df[37,-(1:2)]), col="red", lwd = 2)
plot (c(0,29),c(0,700),type="n", xlab="Data point", ylab=expression(Cross-sectional ~ area ~ (mm^{2})))
#lines(unlist(allSpeakers.df[15,-(1:2)]), col="red", lwd = 2)
lines(unlist(allSpeakers.df[37,-(1:2)]), col="red", lwd = 2)
vt02e <- read.table(paste(path,VTlist[4],"Set1","distance_area","heed.txt",sep="\\"))
lines(vt02e[,2], col="firebrick3", lwd = 2)
# VT09 heed: Comparing linearly interpolated area function with raw distance_area txt from MATLAB
lines(unlist(allSpeakers.df[92,-(1:2)]), col="blue", lwd = 2)
vt09e <- read.table(paste(path,VTlist[9],"Set1","distance_area","heed.txt",sep="\\"))
lines(vt09e[,2], col="deepskyblue3", lwd = 2)
title(main = "Raw and linearly interpolated area functions for 'had' vowel")
legend("topleft", bty="n", c("VT02 interpolated","VT02 raw data", "VT09 interpolated", "VT09 raw data"), lty=c(1,1), col=c("red","firebrick3","blue","deepskyblue3"))
plot (c(0,29),c(0,700),type="n", xlab="Data point", ylab=expression(Cross-sectional ~ area ~ (mm^{2})))
lines(unlist(allSpeakers.df[15,-(1:2)]), col="red", lwd = 2)
vt02e <- read.table(paste(path,VTlist[2],"Set1","distance_area","heed.txt",sep="\\"))
lines(vt02e[,2], col="firebrick3", lwd = 2)
# VT09 heed: Comparing linearly interpolated area function with raw distance_area txt from MATLAB
lines(unlist(allSpeakers.df[92,-(1:2)]), col="blue", lwd = 2)
vt09e <- read.table(paste(path,VTlist[9],"Set1","distance_area","heed.txt",sep="\\"))
lines(vt09e[,2], col="deepskyblue3", lwd = 2)
title(main = "Raw and linearly interpolated area functions for 'had' vowel")
legend("topleft", bty="n", c("VT02 interpolated","VT02 raw data", "VT09 interpolated", "VT09 raw data"), lty=c(1,1), col=c("red","firebrick3","blue","deepskyblue3"))
plot (c(0,29),c(0,700),type="n", xlab="Data point", ylab=expression(Cross-sectional ~ area ~ (mm^{2})))
#lines(unlist(allSpeakers.df[15,-(1:2)]), col="red", lwd = 2)
lines(unlist(allSpeakers.df[37,-(1:2)]), col="red", lwd = 2)
vt02e <- read.table(paste(path,VTlist[4],"Set1","distance_area","heed.txt",sep="\\"))
lines(vt02e[,2], col="firebrick3", lwd = 2)
# VT09 heed: Comparing linearly interpolated area function with raw distance_area txt from MATLAB
lines(unlist(allSpeakers.df[92,-(1:2)]), col="blue", lwd = 2)
vt09e <- read.table(paste(path,VTlist[9],"Set1","distance_area","heed.txt",sep="\\"))
lines(vt09e[,2], col="deepskyblue3", lwd = 2)
title(main = "Raw and linearly interpolated area functions for 'had' vowel")
legend("topleft", bty="n", c("VT02 interpolated","VT02 raw data", "VT09 interpolated", "VT09 raw data"), lty=c(1,1), col=c("red","firebrick3","blue","deepskyblue3"))
# Heed (VT04 vs VT09): Comparing linearly interpolated area function with raw distance_area txt from MATLAB
plot (c(0,29),c(0,700),type="n", xlab="Data point", ylab=expression(Cross-sectional ~ area ~ (mm^{2})))
# VT04
lines(unlist(allSpeakers.df[37,-(1:2)]), col="red", lwd = 2)
vt02e <- read.table(paste(path,VTlist[4],"Set1","distance_area","heed.txt",sep="\\"))
lines(vt02e[,2], col="firebrick3", lwd = 2)
# VT09
lines(unlist(allSpeakers.df[92,-(1:2)]), col="blue", lwd = 2)
vt09e <- read.table(paste(path,VTlist[9],"Set1","distance_area","heed.txt",sep="\\"))
lines(vt09e[,2], col="deepskyblue3", lwd = 2)
# Plot details
title(main = "Raw and linearly interpolated area functions for 'had' vowel")
legend("topleft", bty="n", c("VT04 interpolated","VT04 raw data", "VT09 interpolated", "VT09 raw data"), lty=c(1,1), col=c("red","firebrick3","blue","deepskyblue3"))
plot (c(0,29),c(0,700),type="n", xlab="Data point", ylab=expression(Cross-sectional ~ area ~ (mm^{2})), xlim=c(1,29))
lines(unlist(allSpeakers.df[37,-(1:2)]), col="red", lwd = 2)
vt02e <- read.table(paste(path,VTlist[4],"Set1","distance_area","heed.txt",sep="\\"))
lines(vt02e[,2], col="firebrick3", lwd = 2)
# VT09
lines(unlist(allSpeakers.df[92,-(1:2)]), col="blue", lwd = 2)
vt09e <- read.table(paste(path,VTlist[9],"Set1","distance_area","heed.txt",sep="\\"))
lines(vt09e[,2], col="deepskyblue3", lwd = 2)
# Plot details
title(main = "Raw and linearly interpolated area functions for 'had' vowel")
legend("topleft", bty="n", c("VT04 interpolated","VT04 raw data", "VT09 interpolated", "VT09 raw data"), lty=c(1,1), col=c("red","firebrick3","blue","deepskyblue3"))
plot (c(0,29),c(0,700),type="n", xlab="Data point", ylab=expression(Cross-sectional ~ area ~ (mm^{2})), xlim=c(2,28))
# VT04
lines(unlist(allSpeakers.df[37,-(1:2)]), col="red", lwd = 2)
vt02e <- read.table(paste(path,VTlist[4],"Set1","distance_area","heed.txt",sep="\\"))
lines(vt02e[,2], col="firebrick3", lwd = 2)
# VT09
lines(unlist(allSpeakers.df[92,-(1:2)]), col="blue", lwd = 2)
vt09e <- read.table(paste(path,VTlist[9],"Set1","distance_area","heed.txt",sep="\\"))
lines(vt09e[,2], col="deepskyblue3", lwd = 2)
# Plot details
title(main = "Raw and linearly interpolated area functions for 'had' vowel")
legend("topleft", bty="n", c("VT04 interpolated","VT04 raw data", "VT09 interpolated", "VT09 raw data"), lty=c(1,1), col=c("red","firebrick3","blue","deepskyblue3"))
plot (c(0,29),c(0,700),type="n", xlab="Data point", ylab=expression(Cross-sectional ~ area ~ (mm^{2})), xlim=c(1,29))
# VT04
lines(unlist(allSpeakers.df[37,-(1:2)]), col="red", lwd = 2)
vt02e <- read.table(paste(path,VTlist[4],"Set1","distance_area","heed.txt",sep="\\"))
lines(vt02e[,2], col="firebrick3", lwd = 2)
# VT09
lines(unlist(allSpeakers.df[92,-(1:2)]), col="blue", lwd = 2)
vt09e <- read.table(paste(path,VTlist[9],"Set1","distance_area","heed.txt",sep="\\"))
lines(vt09e[,2], col="deepskyblue3", lwd = 2)
# Plot details
title(main = "Raw and linearly interpolated area functions for 'had' vowel")
legend("topleft", bty="n", c("VT04 interpolated","VT04 raw data", "VT09 interpolated", "VT09 raw data"), lty=c(1,1), col=c("red","firebrick3","blue","deepskyblue3"))
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=T, formant=T, col=colpalette, doellipse = F, xlim = c(-4,4))
title(main = "Vowel centroids on PC1-PC2 planes (12 VTs x 1 Set)", xlab = "PC1", ylab = "PC2")
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=T, formant=F, col=colpalette, doellipse = F, xlim = c(-4,4))
title(main = "Vowel centroids on PC1-PC2 planes (12 VTs x 1 Set)", xlab = "PC1", ylab = "PC2")
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=F, formant=T, col=colpalette, doellipse = F, dopoints = T, xlim = c(-6,6), ylim = c(-6, 6))
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=T, formant=T, col=colpalette, doellipse = F, xlim = c(-4,4))
title(main = "Vowel centroids on PC1-PC2 planes (12 VTs x 1 Set)", xlab = "PC1", ylab = "PC2")
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=T, formant=F, col=colpalette, doellipse = F, xlim = c(-4,4))
title(main = "Vowel centroids on PC1-PC2 planes (12 VTs x 1 Set)", xlab = "PC1", ylab = "PC2")
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=T, formant=F, col=colpalette, doellipse = F, xlim = c(-6,6))
title(main = "Vowel centroids on PC1-PC2 planes (12 VTs x 1 Set)", xlab = "PC1", ylab = "PC2")
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=T, formant=F, col=colpalette, doellipse = F, xlim = c(-6,6), ylim = c(4, -4))
title(main = "Vowel centroids on PC1-PC2 planes (12 VTs x 1 Set)", xlab = "PC1", ylab = "PC2")
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=T, formant=F, col=colpalette, doellipse = F, xlim = c(6,-6), ylim = c(4, -4))
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=T, formant=T, col=colpalette, doellipse = F, xlim = c(6,-6), ylim = c(4, -4))
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=T, formant=T, col=colpalette, doellipse = F)
title(main = "Vowel centroids on PC1-PC2 planes (12 VTs x 1 Set)", xlab = "PC1", ylab = "PC2")
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=T, formant=F, col=colpalette, doellipse = F, xlim = c(6,-6), ylim = c(4, -4))
title(main = "Vowel centroids on PC1-PC2 planes (12 VTs x 1 Set)", xlab = "PC1", ylab = "PC2")
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=T, formant=F, col=colpalette, doellipse = F, xlim = c(-6,6), ylim = c(4, -4))
title(main = "Vowel centroids on PC1-PC2 planes (12 VTs x 1 Set)", xlab = "PC1", ylab = "PC2")
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=T, formant=F, col=colpalette, doellipse = F, xlim = c(6,-6), ylim = c(4, -4))
title(main = "Vowel centroids on PC1-PC2 planes (12 VTs x 1 Set)", xlab = "PC1", ylab = "PC2")
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=T, formant=F, col=colpalette, doellipse = F, xlim = c(6,-6), ylim = c(4, -4))
title(main = "Vowel centroids on unrotated PC1-PC2 planes", xlab = "PC1", ylab = "PC2")
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=T, formant=F, col=colpalette, doellipse = F, xlim = c(-6,6), ylim = c(4, -4))
title(main = "Vowel centroids on negative PC1-PC2 planes (12 VTs x 1 Set)", xlab = "PC1", ylab = "PC2")
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=T, formant=F, col=colpalette, doellipse = F, xlim = c(-6,6), ylim = c(4, -4))
title(main = "Vowel centroids on negative PC1-PC2 planes", xlab = "PC1", ylab = "PC2")
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=T, formant=F, col=colpalette, lwd=2,doellipse = F, xlim = c(-6,6), ylim = c(4, -4))
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=T, formant=F, col=colpalette, font=2, doellipse = F, xlim = c(-6,6), ylim = c(4, -4))
eplot(pca$x[,1:2], labs=as.character(allSpeakers.df[,2]), centroid=T, formant=F, col=colpalette, font=2, doellipse = F, xlim = c(-6,6), ylim = c(4, -4))
title(main = "Vowel centroids on negative PC1-PC2 planes", xlab = "PC1", ylab = "PC2")
pca.var <- pca.summ$importance[2,]
plot(pca.var, type="p", xlab="Principal component #", ylab="% Variance")
title(main = "Proportion of variance explained by principal components (12 VTs x 1 Set)")
title(main = "Proportion of variance explained by principal components")
pca.var <- pca.summ$importance[2,]
plot(pca.var, type="p", xlab="Principal component #", ylab="% Variance")
title(main = "Proportion of variance explained by principal components")
pca.var <- pca.summ$importance[2,]
plot(pca.var, type="p", xlab="Principal component #", ylab="% Variance")
title(main = "Proportion of variance explained by PCs")
pca.var
pca.var[1] + pca.var[2]
